import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { initializeApp } from 'firebase/app';
import { 
    getAuth, 
    onAuthStateChanged, 
    createUserWithEmailAndPassword, 
    signInWithEmailAndPassword, 
    signOut,
    sendPasswordResetEmail,
    updateProfile,
    updatePassword,
    EmailAuthProvider,
    reauthenticateWithCredential
} from 'firebase/auth';
import { 
    getFirestore, 
    doc, 
    setDoc, 
    getDoc, 
    collection, 
    addDoc, 
    query, 
    where, 
    getDocs,
    Timestamp,
    serverTimestamp, 
    updateDoc,
    writeBatch,
    deleteDoc,
    orderBy, 
    limit 
} from 'firebase/firestore';
import { ChevronLeft, ChevronRight, Edit3, Save, X, CalendarDays, Clock, Users, LogOut, Eye, EyeOff, Sun, Moon, Settings, Download, UserCog, FileText, AlertTriangle, KeyRound, Trash2, UserX, User, DatabaseBackup, UploadCloud, HelpCircle, ClipboardX, MessageSquareWarning, ListFilter, PlusCircle, MinusCircle, Activity, BarChart3, Archive, Building, DollarSign } from 'lucide-react'; 
import { ToastContainer, toast } from 'react-toastify';

// --- Konfigurasi Firebase ---
const firebaseConfig = {
  apiKey: "AIzaSyD1xSj5FkMwWf1BXTt1EjuPGN-mU7uHqYQ", 
  authDomain: "aplikasi-gaji-kariawan.firebaseapp.com", 
  projectId: "aplikasi-gaji-kariawan", 
  storageBucket: "aplikasi-gaji-kariawan.firebasestorage.app", 
  messagingSenderId: "261425639379", 
  appId: "1:261425639379:web:97bc639e50974c5a168926" 
};

const appId = firebaseConfig.appId; 

// --- Inisialisasi Firebase ---
let app;
let auth;
let db;

try {
    app = initializeApp(firebaseConfig);
    auth = getAuth(app);
    db = getFirestore(app);
} catch (error) {
    console.error("Error initializing Firebase:", error);
}

// --- Konstanta Aplikasi Default ---
const DEFAULT_BASE_SALARY_PER_MONTH = 1000000; 
const DEFAULT_OVERTIME_RATE_PER_HOUR = 5000;  
const DEFAULT_FULL_WORKDAY_HOURS = 9;         
const DEFAULT_DAILY_RATE_SYSTEM_2 = 55000;
const DEFAULT_TARGET_HOURS_SYSTEM_2 = 12;

const DEFAULT_APP_SETTINGS = {
    baseSalary: DEFAULT_BASE_SALARY_PER_MONTH,
    overtimeRate: DEFAULT_OVERTIME_RATE_PER_HOUR,
    fullWorkdayHours: DEFAULT_FULL_WORKDAY_HOURS,
    dailyRateSystem2: DEFAULT_DAILY_RATE_SYSTEM_2,
    targetHoursSystem2: DEFAULT_TARGET_HOURS_SYSTEM_2,
};

// --- Fungsi Helper ---
const getDaysInMonth = (year, month) => new Date(year, month + 1, 0).getDate();

const getWorkableDaysInMonth = (year, month) => {
    let count = 0;
    const daysInMonth = getDaysInMonth(year, month);
    for (let day = 1; day <= daysInMonth; day++) {
        const date = new Date(year, month, day);
        if (date.getDay() !== 0) count++; 
    }
    return count;
};
const getEffectiveWorkDaysArray = (year, month) => {
    const days = [];
    const daysInMonth = getDaysInMonth(year, month);
    for (let day = 1; day <= daysInMonth; day++) {
        const date = new Date(year, month, day);
        if (date.getDay() !== 0) { 
            days.push(getDateString(date));
        }
    }
    return days;
};


const formatTime = (timestamp) => {
    if (!timestamp) return "--:--";
    const date = timestamp instanceof Timestamp ? timestamp.toDate() : (timestamp instanceof Date ? timestamp : null);
    if (!date) return "--:--";
    return `<span class="math-inline">\{String\(date\.getHours\(\)\)\.padStart\(2, '0'\)\}\:</span>{String(date.getMinutes()).padStart(2, '0')}`;
};

const formatDuration = (totalMinutes) => {
    if (isNaN(totalMinutes) || totalMinutes == null || totalMinutes < 0) return "0j 0m";
    const hours = Math.floor(totalMinutes / 60);
    const minutes = Math.round(totalMinutes % 60);
    return `${hours}j ${minutes}m`;
};

const getDateString = (dateObj) => {
    const year = dateObj.getFullYear();
    const month = String(dateObj.getMonth() + 1).padStart(2, '0');
    const day = String(dateObj.getDate()).padStart(2, '0');
    return `<span class="math-inline">\{year\}\-</span>{month}-${day}`;
};

const getMonday = (d) => {
    d = new Date(d);
    const day = d.getDay(),
        diff = d.getDate() - day + (day === 0 ? -6 : 1); 
    return new Date(d.setDate(diff));
}

const exportToCSV = (data, filename = 'laporan-gaji.csv') => {
    if (!data || data.length === 0) {
        if (toast && typeof toast.warn === 'function') toast.warn("Tidak ada data untuk diekspor.");
        return;
    }
    // Menambahkan kolom tarif kustom ke header jika ada karyawan yang menggunakannya
    const hasCustomSalarySystem1 = data.some(row => row.customBaseSalarySystem1 != null || row.customOvertimeRateSystem1 != null);
    const hasCustomSalarySystem2 = data.some(row => row.customDailyRateSystem2 != null || row.customTargetHoursSystem2 != null);

    const baseHeaders = ["Nama Karyawan", "Email", "Status Akun", "Sistem Gaji"];
    const system1Headers = ["Hari Hadir (Non-Minggu/Pengganti)", "Hari Kerja Efektif (Sistem 1)", "Gaji Pokok (Rp)", "Total Lembur", "Uang Lembur (Rp)"];
    const system2Headers = ["Total Jam Kerja (Sistem 2)"];
    const customSystem1Headers = ["Gaji Pokok Kustom S1 (Rp)", "Tarif Lembur Kustom S1 (Rp/jam)"];
    const customSystem2Headers = ["Tarif Harian Kustom S2 (Rp)", "Target Jam Kustom S2"];
    const totalHeader = ["Total Gaji (Rp)"];

    let headers = [...baseHeaders];
    if (data.some(row => (row.salarySystemType || 1) === 1)) headers.push(...system1Headers);
    if (data.some(row => row.salarySystemType === 2)) headers.push(...system2Headers);
    if (hasCustomSalarySystem1) headers.push(...customSystem1Headers);
    if (hasCustomSalarySystem2) headers.push(...customSystem2Headers);
    headers.push(...totalHeader);
    
    const csvRows = [
        headers.join(','),
        ...data.map(row => {
            const baseRowData = [
                `"${row.name}"`,
                `"${row.email}"`,
                row.isActive ? "Aktif" : "Nonaktif",
                `Sistem ${row.salarySystemType || 1}`,
            ];
            const system1RowData = (row.salarySystemType || 1) === 1 ? [
                row.daysPresentSystem1 || 0, 
                row.workableDaysSystem1 || 0, 
                row.base,
                `"${row.totalOvertimeHours || 0}j ${row.totalOvertimeMinutes || 0}m"`,
                row.overtime,
            ] : Array(system1Headers.length).fill("N/A");

            const system2RowData = row.salarySystemType === 2 ? [
                `"${formatDuration(row.totalWorkMinutesSystem2 || 0)}"`,
            ] : Array(system2Headers.length).fill("N/A");

            const customSystem1RowData = hasCustomSalarySystem1 ? [
                row.customBaseSalarySystem1 != null ? row.customBaseSalarySystem1 : "Global",
                row.customOvertimeRateSystem1 != null ? row.customOvertimeRateSystem1 : "Global",
            ] : [];
            
            const customSystem2RowData = hasCustomSalarySystem2 ? [
                 row.customDailyRateSystem2 != null ? row.customDailyRateSystem2 : "Global",
                 row.customTargetHoursSystem2 != null ? row.customTargetHoursSystem2 : "Global",
            ] : [];

            const totalRowData = [row.total];
            
            let fullRowData = [...baseRowData];
            if (data.some(r => (r.salarySystemType || 1) === 1)) fullRowData.push(...system1RowData);
            if (data.some(r => r.salarySystemType === 2)) fullRowData.push(...system2RowData);
            if (hasCustomSalarySystem1) fullRowData.push(...customSystem1RowData);
            if (hasCustomSalarySystem2) fullRowData.push(...customSystem2RowData);
            fullRowData.push(...totalRowData);

            return fullRowData.join(',');
        })
    ];

    const csvString = csvRows.join('\n');
    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement("a");
    if (link.download !== undefined) {
        const url = URL.createObjectURL(blob);
        link.setAttribute("href", url);
        link.setAttribute("download", filename);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
    if (toast && typeof toast.success === 'function') toast.success("Data berhasil diekspor ke CSV!");
};

const logAdminActivity = async (adminUser, actionType, details, targetUser = null) => {
    if (!db || !appId || !adminUser) {
        console.error("Gagal mencatat aktivitas admin: DB, AppID, atau Admin User tidak tersedia.");
        return;
    }
    try {
        const logData = {
            adminUserId: adminUser.uid,
            adminName: adminUser.displayName || adminUser.email,
            actionType: actionType,
            timestamp: serverTimestamp(),
            details: details || {},
        };
        if (targetUser) {
            logData.targetUserId = targetUser.id || targetUser.uid; 
            logData.targetUserName = targetUser.name || targetUser.email;
        }
        await addDoc(collection(db, `artifacts/${appId}/public/data/admin_activity_logs`), logData);
    } catch (error) {
        console.error("Error logging admin activity:", error);
    }
};


const App = () => {
    const [currentUser, setCurrentUser] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);
    const [isAdmin, setIsAdmin] = useState(false);
    const [userName, setUserName] = useState(''); 
    const [page, setPage] = useState('loading'); 
    const [theme, setTheme] = useState(localStorage.getItem('theme') || 'light');

    const [appSettings, setAppSettings] = useState(DEFAULT_APP_SETTINGS);

    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [name, setName] = useState(''); 

    const [currentDateDisplay, setCurrentDateDisplay] = useState(new Date()); 
    const [workLog, setWorkLog] = useState({}); 
    const [employeeSalary, setEmployeeSalary] = useState(null);
    const [currentEmployeeProfile, setCurrentEmployeeProfile] = useState(null);

    const [selectedMonthAdmin, setSelectedMonthAdmin] = useState(new Date().getMonth());
    const [selectedYearAdmin, setSelectedYearAdmin] = useState(new Date().getFullYear());
    const [adminSalaries, setAdminSalaries] = useState([]);
    const [isLoadingData, setIsLoadingData] = useState(false);
    
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [editingEmployee, setEditingEmployee] = useState(null); 
    const [editingWorkLogsModal, setEditingWorkLogsModal] = useState({}); 
    
    const [isUserSettingsModalOpen, setIsUserSettingsModalOpen] = useState(false);
    const [editingUserSettings, setEditingUserSettings] = useState(null); 
    const [isAppSettingsModalOpen, setIsAppSettingsModalOpen] = useState(false);
    const [tempAppSettings, setTempAppSettings] = useState(appSettings);
    
    const [isProfileModalOpen, setIsProfileModalOpen] = useState(false);
    const [isChangePasswordModalOpen, setIsChangePasswordModalOpen] = useState(false);
    const [profileName, setProfileName] = useState('');
    const [currentPassword, setCurrentPassword] = useState('');
    const [newPassword, setNewPassword] = useState('');
    const [confirmNewPassword, setConfirmNewPassword] = useState('');

    const [isBackupRestoreModalOpen, setIsBackupRestoreModalOpen] = useState(false);
    const [restoreFile, setRestoreFile] = useState(null);
    const [isRestoring, setIsRestoring] = useState(false);
    const [isBackingUp, setIsBackingUp] = useState(false);

    const [adminSelectedEmployeeForMonitor, setAdminSelectedEmployeeForMonitor] = useState(null);
    const [adminMonitorWorkLog, setAdminMonitorWorkLog] = useState({});
    const [adminMonitorSelectedDate, setAdminMonitorSelectedDate] = useState(null);
    const [isDailyDetailModalOpen, setIsDailyDetailModalOpen] = useState(false);
    const [dailyDetailData, setDailyDetailData] = useState(null);
    const [isLoadingAdminMonitor, setIsLoadingAdminMonitor] = useState(false);

    const [adminActivityLogs, setAdminActivityLogs] = useState([]);
    const [isLoadingAdminLogs, setIsLoadingAdminLogs] = useState(false);
    const [lastVisibleLog, setLastVisibleLog] = useState(null);
    const [hasMoreLogs, setHasMoreLogs] = useState(true);

    const [attendanceAnalyticsData, setAttendanceAnalyticsData] = useState([]);
    const [isLoadingAnalytics, setIsLoadingAnalytics] = useState(false);
    const [selectedMonthAnalytics, setSelectedMonthAnalytics] = useState(new Date().getMonth());
    const [selectedYearAnalytics, setSelectedYearAnalytics] = useState(new Date().getFullYear());

    const [activeAdminTab, setActiveAdminTab] = useState('salaryReport'); 


    useEffect(() => {
        const toastifyCSS = document.createElement('link');
        toastifyCSS.href = 'https://cdnjs.cloudflare.com/ajax/libs/react-toastify/9.1.3/ReactToastify.min.css';
        toastifyCSS.rel = 'stylesheet';
        toastifyCSS.type = 'text/css';
        document.head.appendChild(toastifyCSS);

        if (theme === 'dark') {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
        localStorage.setItem('theme', theme);

        return () => {
            if(document.head.contains(toastifyCSS)) { 
                document.head.removeChild(toastifyCSS);
            }
        };
    }, [theme]);

    const toggleTheme = () => setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');

    useEffect(() => {
        const fetchAppSettings = async () => {
            if (!db || !appId) {
                console.warn("fetchAppSettings: DB or AppID not ready. Using defaults.");
                setAppSettings(prev => ({...DEFAULT_APP_SETTINGS, ...prev})); 
                setTempAppSettings(prev => ({...DEFAULT_APP_SETTINGS, ...prev}));
                return;
            }
            if (!currentUser) {
                console.log("[App.js] No authenticated user (currentUser state is null), using default app settings. Settings will be fetched upon login.");
                setAppSettings(DEFAULT_APP_SETTINGS);
                setTempAppSettings(DEFAULT_APP_SETTINGS);
                return;
            }

            const settingsPath = `artifacts/${appId}/public/data/settings/app_config`;
            const settingsRef = doc(db, settingsPath);
            try {
                const docSnap = await getDoc(settingsRef);
                if (docSnap.exists()) {
                    const fetchedSettings = docSnap.data();
                    const completeSettings = { ...DEFAULT_APP_SETTINGS, ...fetchedSettings };
                    setAppSettings(completeSettings);
                    setTempAppSettings(completeSettings); 
                } else {
                    console.warn("[App.js] App settings document does not exist in Firestore. Using default settings. Admin can create this document via App Settings modal.");
                    setAppSettings(DEFAULT_APP_SETTINGS);
                    setTempAppSettings(DEFAULT_APP_SETTINGS);
                    if (isAdmin && currentUser) { 
                        await setDoc(settingsRef, DEFAULT_APP_SETTINGS);
                        console.log("[App.js] Created default app settings in Firestore by admin.");
                        await logAdminActivity(currentUser, "CREATE_DEFAULT_APP_SETTINGS", { settings: DEFAULT_APP_SETTINGS });
                    }
                }
            } catch (err) {
                console.error("[App.js] Error fetching app settings from Firestore:", err); 
                if (toast && typeof toast.error === 'function') {
                    toast.error("Gagal memuat pengaturan aplikasi. Menggunakan pengaturan default.");
                }
                setAppSettings(DEFAULT_APP_SETTINGS); 
                setTempAppSettings(DEFAULT_APP_SETTINGS);
            }
        };
        
        if (isAuthReady && db && appId) { 
            fetchAppSettings();
        } else if (isAuthReady && (!db || !appId)) { 
            console.error("[App.js] DB or AppID not available when auth is ready. Cannot fetch app settings. Using defaults.");
            setAppSettings(DEFAULT_APP_SETTINGS);
            setTempAppSettings(DEFAULT_APP_SETTINGS);
            if(toast && typeof toast.error === 'function') toast.error("Konfigurasi dasar aplikasi gagal dimuat karena DB/AppID tidak siap. Menggunakan default.");
        }
    }, [isAuthReady, appId, isAdmin, currentUser, db]); 


    const calculateSalary = useCallback((userWorkLog, year, month, currentAppSettings, employeeProfileData) => {
        const globalSettings = currentAppSettings || appSettings;
        const salarySystemType = employeeProfileData?.salarySystemType || 1;

        // Pastikan semua tarif adalah angka yang valid, jika tidak, gunakan 0.
        const baseSalaryToUse = (employeeProfileData?.customBaseSalarySystem1 != null && !isNaN(parseFloat(employeeProfileData.customBaseSalarySystem1)))
            ? parseFloat(employeeProfileData.customBaseSalarySystem1)
            : (parseFloat(globalSettings.baseSalary) || 0);

        const overtimeRateToUse = (employeeProfileData?.customOvertimeRateSystem1 != null && !isNaN(parseFloat(employeeProfileData.customOvertimeRateSystem1)))
            ? parseFloat(employeeProfileData.customOvertimeRateSystem1)
            : (parseFloat(globalSettings.overtimeRate) || 0);
        
        const dailyRateSystem2ToUse = (employeeProfileData?.customDailyRateSystem2 != null && !isNaN(parseFloat(employeeProfileData.customDailyRateSystem2)))
            ? parseFloat(employeeProfileData.customDailyRateSystem2)
            : (parseFloat(globalSettings.dailyRateSystem2) || 0);

        const targetHoursSystem2ToUse = (employeeProfileData?.customTargetHoursSystem2 != null && !isNaN(parseInt(employeeProfileData.customTargetHoursSystem2)))
            ? parseInt(employeeProfileData.customTargetHoursSystem2)
            : (parseInt(globalSettings.targetHoursSystem2) || 1); 

        const fullWorkdayHoursToUse = parseFloat(globalSettings.fullWorkdayHours) || 8; 

        if (salarySystemType === 2) {
            let totalPaidWorkMinutesSystem2 = 0;
            let totalDaysWorkedSystem2 = 0;
            const hourlyRateSystem2 = targetHoursSystem2ToUse > 0 ? dailyRateSystem2ToUse / targetHoursSystem2ToUse : 0;

            for (const dateStr in userWorkLog) {
                const log = userWorkLog[dateStr];
                const [logYear, logMonthStr] = dateStr.split('-');
                if (parseInt(logYear) !== year || parseInt(logMonthStr) !== month + 1) continue;
                if (log.entryMethod === 'absence_reason') continue;
                
                const dailyTotalWorkMinutes = Number(log.totalWorkDurationMinutes) || 0;
                if (dailyTotalWorkMinutes > 0) {
                    totalDaysWorkedSystem2++;
                    totalPaidWorkMinutesSystem2 += dailyTotalWorkMinutes;
                }
            }
            const totalSalarySystem2 = (totalPaidWorkMinutesSystem2 / 60) * hourlyRateSystem2;
            return {
                base: 0, overtime: 0, total: Math.round(totalSalarySystem2),
                daysPresentSystem1: 0, workableDaysSystem1: 0, totalOvertimeHours: 0, totalOvertimeMinutes: 0,
                salarySystemType: 2, totalWorkMinutesSystem2: totalPaidWorkMinutesSystem2, daysWorkedSystem2: totalDaysWorkedSystem2,
                customBaseSalarySystem1: employeeProfileData?.customBaseSalarySystem1,
                customOvertimeRateSystem1: employeeProfileData?.customOvertimeRateSystem1,
                customDailyRateSystem2: employeeProfileData?.customDailyRateSystem2,
                customTargetHoursSystem2: employeeProfileData?.customTargetHoursSystem2,
            };
        } else { // Sistem Gaji 1
            const workableDaysInMonth = getWorkableDaysInMonth(year, month);
            let daysPresentOnWorkdays = 0;
            let totalOvertimeMinutesOverall = 0;
            
            const logsInSelectedMonth = Object.values(userWorkLog).filter(log => {
                if (!log || !log.dateStr) return false;
                const [logYear, logMonthStr] = log.dateStr.split('-');
                return parseInt(logYear) === year && parseInt(logMonthStr) === month + 1;
            });

            for (const log of logsInSelectedMonth) {
                if (log.entryMethod === 'absence_reason') continue;
                
                const logDate = new Date(log.dateStr + "T00:00:00");
                const dailyTotalWorkMinutes = Number(log.totalWorkDurationMinutes) || 0;

                if (dailyTotalWorkMinutes > 0) {
                    if (logDate.getDay() === 0) { // Hari Minggu
                        let absentInWeek = false;
                        const mondayOfThisWeek = getMonday(logDate);
                        for (let i = 0; i < 6; i++) {
                            const checkDate = new Date(mondayOfThisWeek);
                            checkDate.setDate(mondayOfThisWeek.getDate() + i);
                            const checkDateStr = getDateString(checkDate);
                            const logForCheckDate = userWorkLog[checkDateStr];
                            if (!logForCheckDate || (logForCheckDate.totalWorkDurationMinutes === 0 && logForCheckDate.entryMethod !== 'absence_reason')) {
                                absentInWeek = true;
                                break;
                            }
                        }
                        if (absentInWeek) {
                            daysPresentOnWorkdays++;
                            const dailyRegularMinutes = fullWorkdayHoursToUse * 60;
                            const dailyOvertimeMinutes = Math.max(0, dailyTotalWorkMinutes - dailyRegularMinutes);
                            totalOvertimeMinutesOverall += dailyOvertimeMinutes;
                        } else {
                            totalOvertimeMinutesOverall += dailyTotalWorkMinutes;
                        }
                    } else { // Hari biasa (Senin-Sabtu)
                        daysPresentOnWorkdays++;
                        const dailyRegularMinutes = fullWorkdayHoursToUse * 60;
                        const dailyOvertimeMinutes = Math.max(0, dailyTotalWorkMinutes - dailyRegularMinutes);
                        totalOvertimeMinutesOverall += dailyOvertimeMinutes;
                    }
                }
            }

            const calculatedBaseSalary = workableDaysInMonth > 0 ? (daysPresentOnWorkdays / workableDaysInMonth) * baseSalaryToUse : 0;
            const totalOvertimeInHours = totalOvertimeMinutesOverall / 60;
            const overtimePay = totalOvertimeInHours * overtimeRateToUse;
            const displayTotalOvertimeHours = Math.floor(totalOvertimeInHours);
            const displayTotalOvertimeMinutes = Math.round((totalOvertimeInHours - displayTotalOvertimeHours) * 60);

            return {
                base: Math.round(calculatedBaseSalary), overtime: Math.round(overtimePay),
                total: Math.round(calculatedBaseSalary + overtimePay),
                daysPresentSystem1: daysPresentOnWorkdays, workableDaysSystem1: workableDaysInMonth,
                totalOvertimeHours: displayTotalOvertimeHours, totalOvertimeMinutes: displayTotalOvertimeMinutes,
                salarySystemType: 1,
                customBaseSalarySystem1: employeeProfileData?.customBaseSalarySystem1,
                customOvertimeRateSystem1: employeeProfileData?.customOvertimeRateSystem1,
                customDailyRateSystem2: employeeProfileData?.customDailyRateSystem2,
                customTargetHoursSystem2: employeeProfileData?.customTargetHoursSystem2,
            };
        }
    }, [appSettings]); 

    const calculateDailySalary = useCallback((logEntry, employeeProfile, currentAppSettings, dateObj) => {
        if (!employeeProfile || !currentAppSettings) {
            return { base: 0, overtime: 0, total: 0, notes: "Data profil/pengaturan tidak lengkap." };
        }
    
        const globalSettings = currentAppSettings;
        const salarySystemType = employeeProfile.salarySystemType || 1;

        const baseSalaryToUse = (employeeProfile?.customBaseSalarySystem1 != null && !isNaN(parseFloat(employeeProfile.customBaseSalarySystem1)))
            ? parseFloat(employeeProfile.customBaseSalarySystem1)
            : globalSettings.baseSalary;
        const overtimeRateToUse = (employeeProfile?.customOvertimeRateSystem1 != null && !isNaN(parseFloat(employeeProfile.customOvertimeRateSystem1)))
            ? parseFloat(employeeProfile.customOvertimeRateSystem1)
            : globalSettings.overtimeRate;
        
        const dailyRateSystem2ToUse = (employeeProfile?.customDailyRateSystem2 != null && !isNaN(parseFloat(employeeProfile.customDailyRateSystem2)))
            ? parseFloat(employeeProfile.customDailyRateSystem2)
            : globalSettings.dailyRateSystem2;
        const targetHoursSystem2ToUse = (employeeProfile?.customTargetHoursSystem2 != null && !isNaN(parseInt(employeeProfile.customTargetHoursSystem2)))
            ? parseInt(employeeProfile.customTargetHoursSystem2)
            : globalSettings.targetHoursSystem2;
        
        const fullWorkdayHoursToUse = globalSettings.fullWorkdayHours;
    
        if (!logEntry || logEntry.entryMethod === 'absence_reason' || (logEntry.totalWorkDurationMinutes === 0 && logEntry.entryMethod !== 'clock' && logEntry.entryMethod !== 'manual' && logEntry.entryMethod !== 'multi_session_clock')) {
            let notes = "Tidak ada catatan kerja atau keterangan tidak masuk.";
            if (logEntry && logEntry.entryMethod === 'absence_reason') {
                notes = `Keterangan: ${logEntry.absenceReason || 'Tidak masuk'}`;
            } else if (logEntry && logEntry.totalWorkDurationMinutes === 0) {
                notes = "Durasi kerja 0 menit.";
            }
            return { base: 0, overtime: 0, total: 0, notes };
        }
    
        const dailyTotalWorkMinutes = Number(logEntry.totalWorkDurationMinutes) || 0;
    
        if (salarySystemType === 2) {
            const hourlyRateSystem2 = targetHoursSystem2ToUse > 0 ? dailyRateSystem2ToUse / targetHoursSystem2ToUse : 0;
            const dailySalarySystem2 = (dailyTotalWorkMinutes / 60) * hourlyRateSystem2;
            let notes = `Sistem 2: Tarif Harian`;
            if (employeeProfile?.customDailyRateSystem2 != null) notes += ` (Kustom Rp <span class="math-inline">\{dailyRateSystem2ToUse\.toLocaleString\('id\-ID'\)\}</span>{employeeProfile?.customTargetHoursSystem2 != null ? ` / ${targetHoursSystem2ToUse} jam` : ''})`;
            return { base: 0, overtime: 0, total: Math.round(dailySalarySystem2), notes };
        } else { // Sistem Gaji 1
            let dailyBase = 0;
            let dailyOvertimePay = 0;
            let notes = "Sistem 1: ";
            if (employeeProfile?.customBaseSalarySystem1 != null) notes += ` Gaji Pokok Kustom.`;
            else notes += ` Gaji Pokok Global.`;
            if (employeeProfile?.customOvertimeRateSystem1 != null) notes += ` Lembur Kustom.`;
            else notes += ` Lembur Global.`;

            const dayOfWeek = dateObj.getDay(); 
    
            if (dayOfWeek !== 0) { 
                notes += " Hari Kerja Biasa.";
                const workableDaysInMonth = getWorkableDaysInMonth(dateObj.getFullYear(), dateObj.getMonth());
                if (workableDaysInMonth > 0 && dailyTotalWorkMinutes > 0) {
                    dailyBase = baseSalaryToUse / workableDaysInMonth;
                }
                const regularWorkMinutes = fullWorkdayHoursToUse * 60;
                const overtimeMinutesToday = Math.max(0, dailyTotalWorkMinutes - regularWorkMinutes);
                dailyOvertimePay = (overtimeMinutesToday / 60) * overtimeRateToUse;
            } else { 
                let absentInWeek = false;
                if (adminMonitorWorkLog && Object.keys(adminMonitorWorkLog).length > 0) { 
                    const mondayOfThisWeek = getMonday(dateObj);
                    for (let i = 0; i < 6; i++) { 
                        const checkDate = new Date(mondayOfThisWeek);
                        checkDate.setDate(mondayOfThisWeek.getDate() + i);
                        const checkDateStr = getDateString(checkDate);
                        const logForCheckDate = adminMonitorWorkLog[checkDateStr]; 
                        if (!logForCheckDate || (logForCheckDate.totalWorkDurationMinutes === 0 && logForCheckDate.entryMethod !== 'absence_reason')) {
                            absentInWeek = true;
                            break;
                        }
                    }
                } else {
                    console.warn("calculateDailySalary: adminMonitorWorkLog tidak tersedia untuk cek mingguan hari Minggu. Default ke lembur penuh.");
                }

                if (absentInWeek) {
                    notes += " Minggu (Hari Pengganti).";
                    const workableDaysInMonth = getWorkableDaysInMonth(dateObj.getFullYear(), dateObj.getMonth());
                    if (workableDaysInMonth > 0 && dailyTotalWorkMinutes > 0) {
                         dailyBase = baseSalaryToUse / workableDaysInMonth;
                    }
                    const regularWorkMinutes = fullWorkdayHoursToUse * 60;
                    const overtimeMinutesToday = Math.max(0, dailyTotalWorkMinutes - regularWorkMinutes);
                    dailyOvertimePay = (overtimeMinutesToday / 60) * overtimeRateToUse;
                } else {
                    notes += " Minggu (Lembur Penuh).";
                    dailyOvertimePay = (dailyTotalWorkMinutes / 60) * overtimeRateToUse;
                    dailyBase = 0; 
                }
            }
            return { 
                base: Math.round(dailyBase), 
                overtime: Math.round(dailyOvertimePay), 
                total: Math.round(dailyBase + dailyOvertimePay),
                notes
            };
        }
    }, [adminMonitorWorkLog, appSettings]); 


    useEffect(() => {
        if (!auth || !db) { 
            if(toast && typeof toast.error === 'function') toast.error("Firebase tidak terinisialisasi.");
            setPage('error'); 
            setIsAuthReady(true);
            return;
        }
        const unsubscribe = onAuthStateChanged(auth, async (user) => {
            setIsAuthReady(false); 
            if (user) { 
                if (user.isAnonymous) { 
                    setCurrentUser(null); setUserId(null); setUserName(''); setIsAdmin(false); setPage('login'); setCurrentEmployeeProfile(null);
                } else {
                    const uId = user.uid;
                    try {
                        const userProfileRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{uId}`);
                        const userProfileSnap = await getDoc(userProfileRef);

                        if (userProfileSnap.exists()) {
                            const profileData = userProfileSnap.data();
                            if(profileData.isActive === false){ 
                                if(toast && typeof toast.error === 'function') toast.error("Akun Anda telah dinonaktifkan. Hubungi Admin.");
                                await signOut(auth);
                                setCurrentUser(null); setUserId(null); setIsAdmin(false); setUserName(''); setPage('login'); setCurrentEmployeeProfile(null);
                                setIsAuthReady(true);
                                return; 
                            }
                            setUserName(profileData.name || ''); 
                            setProfileName(profileData.name || ''); 
                            setIsAdmin(profileData.isAdmin || false);
                            setCurrentEmployeeProfile(profileData); 
                            setPage(profileData.isAdmin ? 'admin' : 'employee');
                            setCurrentUser(user); 
                            setUserId(uId);
                        } else {
                            if(toast && typeof toast.error === 'function') toast.error("Data profil tidak ditemukan.");
                            await signOut(auth); 
                            setCurrentUser(null); setUserId(null); setIsAdmin(false); setUserName(''); setPage('login'); setCurrentEmployeeProfile(null);
                        }
                    } catch (err) {
                        if(toast && typeof toast.error === 'function') toast.error(`Kesalahan memuat profil: ${err.message}.`);
                        await signOut(auth); 
                        setCurrentUser(null); setUserId(null); setIsAdmin(false); setUserName(''); setPage('login'); setCurrentEmployeeProfile(null);
                    }
                }
            } else {
                setCurrentUser(null); setUserId(null); setIsAdmin(false); setUserName(''); setPage('login'); setCurrentEmployeeProfile(null);
            }
            setIsAuthReady(true); 
        });
        return () => unsubscribe(); 
    }, [appId]); 

    const fetchWorkLogForMonth = useCallback(async (uid, year, month) => {
        if (!db || !uid || !appId) return {}; 
        const monthString = `<span class="math-inline">\{year\}\-</span>{String(month + 1).padStart(2, '0')}`;
        const workLogCollectionRef = collection(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{uid}/work_records`);
        const q = query(workLogCollectionRef, where("monthYear", "==", monthString), where("userId", "==", uid));
        const newWorkLog = {}; 
        try {
            const querySnapshot = await getDocs(q);
            querySnapshot.forEach((docSnap) => {
                const data = docSnap.data();
                if (data.entryMethod === 'multi_session_clock' && !Array.isArray(data.sessions)) {
                    data.sessions = [];
                }
                newWorkLog[data.dateStr] = { ...data, id: docSnap.id };
            });
        } catch (err) {
            if (toast && typeof toast.error === 'function') toast.error("Gagal mengambil data kerja: " + err.message);
        }
        return newWorkLog; 
    }, [appId, db]); 

    useEffect(() => {
        if (page === 'employee' && userId && isAuthReady && db) { 
            setIsLoadingData(true);
            fetchWorkLogForMonth(userId, currentDateDisplay.getFullYear(), currentDateDisplay.getMonth())
                .then(logData => {
                    setWorkLog(logData);
                    setIsLoadingData(false);
                }).catch(() => setIsLoadingData(false)); 
        }
    }, [userId, currentDateDisplay, page, isAuthReady, fetchWorkLogForMonth, db]); 
    
    useEffect(() => {
        if (page === 'employee' && isAuthReady && appSettings && appSettings.baseSalary !== undefined && currentEmployeeProfile) {
            setEmployeeSalary(calculateSalary(workLog, currentDateDisplay.getFullYear(), currentDateDisplay.getMonth(), appSettings, currentEmployeeProfile));
        }
    }, [workLog, currentDateDisplay, page, calculateSalary, isAuthReady, appSettings, currentEmployeeProfile]);

    const handleRegister = async (e) => {
        e.preventDefault();
        if (!name.trim()) { toast.error("Nama tidak boleh kosong."); return; }
        if (!email.trim()) { toast.error("Email tidak boleh kosong."); return; }
        if (!password) { toast.error("Password tidak boleh kosong."); return; }

        try {
            const userRegistryRef = collection(db, `artifacts/${appId}/public/data/user_registry`);
            const registrySnap = await getDocs(userRegistryRef);
            const isFirstUser = registrySnap.empty;

            const userCredential = await createUserWithEmailAndPassword(auth, email, password);
            const user = userCredential.user;
            await updateProfile(user, { displayName: name });
            
            const initialProfileData = {
                name: name, email: user.email, isAdmin: isFirstUser, registeredAt: Timestamp.now(), 
                isActive: true, salarySystemType: 1,
                customBaseSalarySystem1: null, customOvertimeRateSystem1: null,
                customDailyRateSystem2: null, customTargetHoursSystem2: null,
            };
            await setDoc(doc(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{user.uid}`), initialProfileData);
            await setDoc(doc(db, `artifacts/<span class="math-inline">\{appId\}/public/data/user\_registry/</span>{user.uid}`), {
                name: name, email: user.email, userId: user.uid 
            });
            
            toast.success(`Registrasi berhasil! ${isFirstUser ? 'Anda Admin.' : ''} Silakan login.`);
            setName(''); setEmail(''); setPassword('');
            setPage('login'); 
        } catch (err) {
            if (err.code === 'auth/email-already-in-use') toast.error("Email sudah terdaftar.");
            else toast.error(`Registrasi gagal: ${err.message}`);
        }
    };

    const handleLogin = async (e) => {
        e.preventDefault();
        if (!email.trim()) { toast.error("Email tidak boleh kosong."); return; }
        if (!password) { toast.error("Password tidak boleh kosong."); return; }
        try {
            await signInWithEmailAndPassword(auth, email, password);
            toast.success("Login berhasil!");
        } catch (err) {
            if (err.code === 'auth/user-not-found' || err.code === 'auth/wrong-password' || err.code === 'auth/invalid-credential') {
                toast.error("Email atau password salah.");
            } else {
                toast.error(`Login gagal: ${err.message}`);
            }
        }
    };

    const handleLogout = async () => {
        try {
            await signOut(auth);
            toast.info("Anda telah logout.");
        } catch (err) {
            toast.error(`Gagal logout: ${err.message}`);
        }
    };
    
    const handleProfileUpdate = async () => {
        if (!currentUser || !profileName.trim()) {
            toast.error("Nama tidak boleh kosong.");
            return;
        }
        try {
            await updateProfile(currentUser, { displayName: profileName });
            const userDocRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{currentUser.uid}`);
            await updateDoc(userDocRef, { name: profileName });
            const userRegistryRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/public/data/user\_registry/</span>{currentUser.uid}`);
            await updateDoc(userRegistryRef, { name: profileName });
            setUserName(profileName); 
            toast.success("Profil berhasil diperbarui!");
            setIsProfileModalOpen(false);
            await logAdminActivity(currentUser, "UPDATE_OWN_PROFILE", { changedFields: ['name'] });
        } catch (error) {
            console.error("Error updating profile:", error);
            toast.error(`Gagal memperbarui profil: ${error.message}`);
        }
    };

    const handleChangePassword = async (e) => {
        e.preventDefault();
        if (newPassword !== confirmNewPassword) {
            toast.error("Password baru dan konfirmasi tidak cocok."); return; }
        if (newPassword.length < 6) {
            toast.error("Password baru minimal harus 6 karakter."); return; }
        if (!currentUser) return;
        try {
            const credential = EmailAuthProvider.credential(currentUser.email, currentPassword);
            await reauthenticateWithCredential(currentUser, credential);
            await updatePassword(currentUser, newPassword);
            toast.success("Password berhasil diubah!");
            setIsChangePasswordModalOpen(false);
            setCurrentPassword(''); setNewPassword(''); setConfirmNewPassword('');
            await logAdminActivity(currentUser, "CHANGE_OWN_PASSWORD", {});
        } catch (error) {
            console.error("Error changing password:", error);
            let errorMessage = "Gagal mengubah password.";
            if (error.code === 'auth/wrong-password') errorMessage = "Password saat ini yang Anda masukkan salah.";
            else if (error.code === 'auth/too-many-requests') errorMessage = "Terlalu banyak percobaan. Silakan coba lagi nanti.";
            else errorMessage = `Error: ${error.message}`;
            toast.error(errorMessage);
        }
    };
    
    const fetchAllEmployeeDataForMonth = useCallback(async (year, month) => {
        if (!db || !appId || !calculateSalary || !appSettings || !currentUser) {
            console.warn("fetchAllEmployeeDataForMonth: Prasyarat tidak terpenuhi.");
            return;
        }
        setIsLoadingData(true);
        const allSalaries = [];
        try {
            const userRegistryRef = collection(db, `artifacts/${appId}/public/data/user_registry`);
            const registrySnap = await getDocs(userRegistryRef);

            for (const userRegDoc of registrySnap.docs) {
                const registryData = userRegDoc.data();
                const empId = registryData.userId || userRegDoc.id;
                if (!empId) continue;

                const userProfileRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{empId}`);
                const userProfileSnap = await getDoc(userProfileRef);

                if (userProfileSnap.exists()) {
                    const profileData = userProfileSnap.data();
                    const workLogsForMonth = await fetchWorkLogForMonth(empId, year, month);
                    const salaryDetails = calculateSalary(workLogsForMonth, year, month, appSettings, profileData);
                    
                    allSalaries.push({
                        id: empId,
                        name: profileData.name,
                        email: profileData.email,
                        isActive: profileData.isActive !== undefined ? profileData.isActive : true,
                        isAdmin: profileData.isAdmin || false,
                        salarySystemType: profileData.salarySystemType || 1,
                        customBaseSalarySystem1: profileData.customBaseSalarySystem1,
                        customOvertimeRateSystem1: profileData.customOvertimeRateSystem1,
                        customDailyRateSystem2: profileData.customDailyRateSystem2,
                        customTargetHoursSystem2: profileData.customTargetHoursSystem2,
                        ...salaryDetails,
                        workLogsForMonth: workLogsForMonth, 
                    });
                }
            }
            setAdminSalaries(allSalaries);
        } catch (err) {
            console.error("Error fetching all employee data for month:", err);
            toast.error("Gagal memuat data gaji karyawan: " + err.message);
            setAdminSalaries([]);
        } finally {
            setIsLoadingData(false);
        }
    }, [db, appId, calculateSalary, appSettings, currentUser, fetchWorkLogForMonth]);


    useEffect(() => {
        if (page === 'admin' && isAdmin && isAuthReady && db && appSettings && appSettings.baseSalary !== undefined && activeAdminTab === 'salaryReport') { 
            fetchAllEmployeeDataForMonth(selectedYearAdmin, selectedMonthAdmin);
        }
    }, [page, isAdmin, isAuthReady, selectedYearAdmin, selectedMonthAdmin, fetchAllEmployeeDataForMonth, db, appSettings, activeAdminTab]); 


    const handleOpenAdminEditModal = (employee) => {
        setEditingEmployee(employee);
        const initialEditingLogs = {};
        const daysInSelectedMonth = getDaysInMonth(selectedYearAdmin, selectedMonthAdmin);
        for (let day = 1; day <= daysInSelectedMonth; day++) {
            const dateKey = `<span class="math-inline">\{selectedYearAdmin\}\-</span>{String(selectedMonthAdmin + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
            const existingLog = employee.workLogsForMonth[dateKey];
            initialEditingLogs[dateKey] = {
                totalWorkDurationMinutes: existingLog ? (existingLog.totalWorkDurationMinutes || 0) : 0,
                id: existingLog ? existingLog.id : null,
                absenceReason: existingLog ? (existingLog.absenceReason || '') : '',
                entryMethod: existingLog ? (existingLog.entryMethod || '') : '',
                sessions: existingLog?.sessions || [] 
            };
        }
        setEditingWorkLogsModal(initialEditingLogs);
        setIsEditModalOpen(true);
    };

    const handleAdminWorkLogChange = (dateKey, newTotalMinutes, newAbsenceReason = null) => {
        setEditingWorkLogsModal(prevLogs => {
            const updatedLog = { ...(prevLogs[dateKey] || {}) }; 
            updatedLog.totalWorkDurationMinutes = newTotalMinutes < 0 ? 0 : newTotalMinutes;
            
            if (newAbsenceReason !== null) { 
                updatedLog.absenceReason = newAbsenceReason;
                if (newAbsenceReason.trim() !== '') {
                    updatedLog.totalWorkDurationMinutes = 0;
                    updatedLog.entryMethod = 'absence_reason';
                    updatedLog.sessions = []; 
                } else if (updatedLog.entryMethod === 'absence_reason') { 
                    updatedLog.entryMethod = 'admin_edited'; 
                }
            } else if (updatedLog.entryMethod !== 'absence_reason') { 
                 updatedLog.absenceReason = null;
                 updatedLog.entryMethod = 'admin_edited';
                 updatedLog.sessions = []; 
            }
            return { ...prevLogs, [dateKey]: updatedLog };
        });
    };
    
    const saveAdminWorkLogChanges = async () => {
        if (!editingEmployee || !db || !appId || !currentUser) return; 
        setIsLoadingData(true);
        const batch = writeBatch(db);
        let changesMade = false;
        const originalWorkLogsForMonth = { ...editingEmployee.workLogsForMonth }; 

        try {
            for (const dateKey in editingWorkLogsModal) {
                const originalLog = originalWorkLogsForMonth[dateKey];
                const editedLogData = editingWorkLogsModal[dateKey];

                const dateObj = new Date(dateKey + "T00:00:00");
                const monthYear = `<span class="math-inline">\{dateObj\.getFullYear\(\)\}\-</span>{String(dateObj.getMonth() + 1).padStart(2, '0')}`;
                
                let dataToSave = {
                    dateStr: dateKey, monthYear: monthYear, userId: editingEmployee.id,
                    totalWorkDurationMinutes: editedLogData.totalWorkDurationMinutes,
                    entryMethod: editedLogData.entryMethod || 'admin_edited', 
                    lastUpdated: serverTimestamp(),
                    absenceReason: editedLogData.absenceReason || null,
                    sessions: (editedLogData.entryMethod === 'admin_edited' || editedLogData.entryMethod === 'absence_reason' || editedLogData.entryMethod === 'manual') ? [] : (originalLog?.sessions || []),
                    clockInTimestamp: (editedLogData.entryMethod === 'multi_session_clock' || !originalLog) ? null : originalLog?.clockInTimestamp,
                    clockOutTimestamp: (editedLogData.entryMethod === 'multi_session_clock' || !originalLog) ? null : originalLog?.clockOutTimestamp,
                };

                if (dataToSave.entryMethod === 'absence_reason') {
                    dataToSave.totalWorkDurationMinutes = 0;
                    dataToSave.clockInTimestamp = null;
                    dataToSave.clockOutTimestamp = null;
                    dataToSave.sessions = [];
                    if (!dataToSave.absenceReason || dataToSave.absenceReason.trim() === '') {
                        toast.error(`Alasan tidak masuk untuk tanggal ${dateKey} tidak boleh kosong jika metode adalah 'Keterangan Tidak Masuk'.`);
                        setIsLoadingData(false);
                        return; 
                    }
                } else if (dataToSave.entryMethod !== 'multi_session_clock') { 
                    dataToSave.sessions = []; 
                }

                const recordRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{editingEmployee.id}/work_records`, dateKey); 

                if (!originalLog && (editedLogData.totalWorkDurationMinutes > 0 || dataToSave.entryMethod === 'absence_reason')) { 
                    batch.set(recordRef, dataToSave);
                    changesMade = true;
                    await logAdminActivity(currentUser, "CREATE_USER_WORKLOG", { date: dateKey, newData: dataToSave }, editingEmployee);
                } else if (originalLog) { 
                    const hasChanged = originalLog.totalWorkDurationMinutes !== editedLogData.totalWorkDurationMinutes ||
                                     originalLog.absenceReason !== (editedLogData.absenceReason || null) ||
                                     originalLog.entryMethod !== (editedLogData.entryMethod || 'admin_edited');

                    if (hasChanged) {
                        if (editedLogData.totalWorkDurationMinutes === 0 && dataToSave.entryMethod !== 'absence_reason' && originalLog.totalWorkDurationMinutes > 0 && dataToSave.entryMethod !== 'multi_session_clock') {
                            batch.delete(recordRef);
                            await logAdminActivity(currentUser, "DELETE_USER_WORKLOG", { date: dateKey, oldData: originalLog }, editingEmployee);
                        } else {
                            batch.update(recordRef, dataToSave);
                            await logAdminActivity(currentUser, "UPDATE_USER_WORKLOG", { date: dateKey, oldData: originalLog, newData: dataToSave }, editingEmployee);
                        }
                        changesMade = true;
                    }
                }
            }
            if (changesMade) {
                await batch.commit();
                toast.success(`Data kerja ${editingEmployee.name} berhasil diperbarui.`);
            } else {
                toast.info("Tidak ada perubahan untuk disimpan.");
            }
            fetchAllEmployeeDataForMonth(selectedYearAdmin, selectedMonthAdmin); 
            if (adminSelectedEmployeeForMonitor?.id === editingEmployee.id) {
                fetchWorkLogForAdminMonitor(editingEmployee.id, selectedYearAdmin, selectedMonthAdmin);
            }
        } catch (err) {
            toast.error("Gagal memperbarui data kerja: " + err.message);
        } finally {
            setIsLoadingData(false);
            setIsEditModalOpen(false);
        }
    };

    const openUserSettingsModal = async (employeeId) => {
        const userDocRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{employeeId}`);
        const userDocSnap = await getDoc(userDocRef);
        if (userDocSnap.exists()) {
            const data = userDocSnap.data();
            setEditingUserSettings({ 
                id: employeeId, 
                ...data,
                customBaseSalarySystem1: data.customBaseSalarySystem1 !== undefined ? data.customBaseSalarySystem1 : null,
                customOvertimeRateSystem1: data.customOvertimeRateSystem1 !== undefined ? data.customOvertimeRateSystem1 : null,
                customDailyRateSystem2: data.customDailyRateSystem2 !== undefined ? data.customDailyRateSystem2 : null,
                customTargetHoursSystem2: data.customTargetHoursSystem2 !== undefined ? data.customTargetHoursSystem2 : null,
            });
            setIsUserSettingsModalOpen(true);
        } else {
            toast.error("Gagal memuat data pengguna.");
        }
    };

    const handleAdminSendPasswordReset = async (employeeEmail) => {
        if (!auth || !currentUser) { toast.error("Layanan autentikasi atau admin tidak siap."); return; }
        if (!employeeEmail) { toast.error("Email karyawan tidak ditemukan."); return; }
        try {
            await sendPasswordResetEmail(auth, employeeEmail);
            toast.success(`Email reset password telah dikirim ke ${employeeEmail}.`);
            await logAdminActivity(currentUser, "SEND_PASSWORD_RESET", {}, { email: employeeEmail });
        } catch (error) {
            console.error("Error sending password reset email:", error);
            toast.error(`Gagal mengirim email reset password: ${error.message}`);
        }
    };
    
    const handleAdminDeactivateAndDeleteData = async (employeeId, employeeName) => {
        if (!db || !appId || !employeeId || !currentUser) return;
    
        const userConfirmation = await new Promise(async (resolve) => {
            const ModalConfirm = ({ onConfirm, onCancel }) => (
                <div className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center p-4 z-[100]">
                    <div className={`p-6 rounded-xl shadow-2xl w-full max-w-md ${theme === 'dark' ? 'bg-slate-800 text-slate-200' : 'bg-white text-slate-800'}`}>
                        <h3 className="text-lg font-semibold mb-4">Konfirmasi Tindakan</h3>
                        <p className="mb-6 text-sm">Apakah Anda yakin ingin menonaktifkan akun <span className="font-bold">{employeeName}</span> dan menghapus semua data terkait (catatan kerja & entri registri)? Tindakan ini tidak dapat diurungkan untuk data yang dihapus.</p>
                        <div className="flex justify-end gap-3">
                            <button onClick={() => onCancel(false)} className={`px-4 py-2 rounded-lg text-sm font-medium border ${theme === 'dark' ? 'border-slate-600 hover:bg-slate-700' : 'border-gray-300 hover:bg-gray-100'}`}>Batal</button>
                            <button onClick={() => onConfirm(true)} className={`px-4 py-2 rounded-lg text-sm font-medium text-white ${theme === 'dark' ? 'bg-red-700 hover:bg-red-800' : 'bg-red-600 hover:bg-red-700'}`}>Ya, Lanjutkan</button>
                        </div>
                    </div>
                </div>
            );
            
            const modalRoot = document.createElement('div');
            document.body.appendChild(modalRoot);
            const { createRoot } = await import('react-dom/client'); 
            const root = createRoot(modalRoot);
            root.render(<ModalConfirm 
                onConfirm={(res) => { root.unmount(); modalRoot.remove(); resolve(res); }} 
                onCancel={(res) => { root.unmount(); modalRoot.remove(); resolve(res); }} 
            />);
        });

        if (!userConfirmation) {
            toast.info("Tindakan dibatalkan.");
            return;
        }
    
        setIsLoadingData(true);
        try {
            const userProfileRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{employeeId}`);
            await updateDoc(userProfileRef, { isActive: false });
            toast.info(`Akun ${employeeName} telah dinonaktifkan.`);
            await logAdminActivity(currentUser, "DEACTIVATE_USER", { reason: "Deactivated and data deleted by admin" }, {id: employeeId, name: employeeName});
    
            const userRegistryRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/public/data/user\_registry/</span>{employeeId}`);
            await deleteDoc(userRegistryRef);
            toast.info(`Entri registri untuk ${employeeName} telah dihapus.`);
    
            const workLogCollectionRef = collection(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{employeeId}/work_records`);
            const workLogSnapshot = await getDocs(workLogCollectionRef);
            const batchDelete = writeBatch(db); 
            workLogSnapshot.forEach((doc) => {
                batchDelete.delete(doc.ref);
            });
            await batchDelete.commit();
            if (workLogSnapshot.size > 0) {
                toast.info(`Semua (${workLogSnapshot.size}) catatan kerja untuk ${employeeName} telah dihapus.`);
            }
    
            toast.success(`Proses untuk ${employeeName} selesai. Akun nonaktif dan data terkait telah dihapus.`);
            fetchAllEmployeeDataForMonth(selectedYearAdmin, selectedMonthAdmin); 
            setIsUserSettingsModalOpen(false); 
            if (adminSelectedEmployeeForMonitor?.id === employeeId) {
                setAdminSelectedEmployeeForMonitor(null);
                setAdminMonitorWorkLog({});
            }
    
        } catch (err) {
            console.error("Error deactivating/deleting user data by admin:", err);
            toast.error(`Gagal memproses: ${err.message}`);
        } finally {
            setIsLoadingData(false);
        }
    };


    const handleSaveUserSettings = async () => {
        if (!editingUserSettings || !editingUserSettings.id || !currentUser) return;
        const userDocRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{editingUserSettings.id}`);
        const userRegistryRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/public/data/user\_registry/</span>{editingUserSettings.id}`);
        const oldSettingsSnap = await getDoc(userDocRef);
        const oldSettings = oldSettingsSnap.exists() ? oldSettingsSnap.data() : {};

        try {
            const systemType = parseInt(editingUserSettings.salarySystemType);
            if (isNaN(systemType) || (systemType !== 1 && systemType !== 2)) {
                toast.error("Sistem gaji tidak valid. Pilih 1 atau 2.");
                return;
            }

            const { id, registeredAt, email: originalEmail, ...dataFromState } = editingUserSettings;
            const dataToUpdate = {
                name: dataFromState.name,
                isAdmin: dataFromState.isAdmin || false,
                isActive: dataFromState.isActive === undefined ? true : dataFromState.isActive,
                salarySystemType: systemType,
                customBaseSalarySystem1: dataFromState.customBaseSalarySystem1 === '' ? null : (dataFromState.customBaseSalarySystem1 != null ? parseFloat(dataFromState.customBaseSalarySystem1) : null),
                customOvertimeRateSystem1: dataFromState.customOvertimeRateSystem1 === '' ? null : (dataFromState.customOvertimeRateSystem1 != null ? parseFloat(dataFromState.customOvertimeRateSystem1) : null),
                customDailyRateSystem2: dataFromState.customDailyRateSystem2 === '' ? null : (dataFromState.customDailyRateSystem2 != null ? parseFloat(dataFromState.customDailyRateSystem2) : null),
                customTargetHoursSystem2: dataFromState.customTargetHoursSystem2 === '' ? null : (dataFromState.customTargetHoursSystem2 != null ? parseInt(dataFromState.customTargetHoursSystem2) : null),
            };
            
            if ((dataToUpdate.customBaseSalarySystem1 != null && isNaN(dataToUpdate.customBaseSalarySystem1)) ||
                (dataToUpdate.customOvertimeRateSystem1 != null && isNaN(dataToUpdate.customOvertimeRateSystem1)) ||
                (dataToUpdate.customDailyRateSystem2 != null && isNaN(dataToUpdate.customDailyRateSystem2)) ||
                (dataToUpdate.customTargetHoursSystem2 != null && isNaN(dataToUpdate.customTargetHoursSystem2))
            ) {
                toast.error("Nilai gaji kustom harus berupa angka yang valid atau kosongkan untuk menggunakan global.");
                return;
            }
            if ((dataToUpdate.customBaseSalarySystem1 != null && dataToUpdate.customBaseSalarySystem1 < 0) ||
                (dataToUpdate.customOvertimeRateSystem1 != null && dataToUpdate.customOvertimeRateSystem1 < 0) ||
                (dataToUpdate.customDailyRateSystem2 != null && dataToUpdate.customDailyRateSystem2 < 0) ||
                (dataToUpdate.customTargetHoursSystem2 != null && (dataToUpdate.customTargetHoursSystem2 <= 0 || dataToUpdate.customTargetHoursSystem2 > 24))
            ) {
                toast.error("Nilai gaji kustom tidak valid (negatif atau target jam di luar batas).");
                return;
            }


            await updateDoc(userDocRef, dataToUpdate);
            if(dataToUpdate.name && dataToUpdate.name !== oldSettings.name) { 
                await updateDoc(userRegistryRef, { name: dataToUpdate.name });
            }
            toast.success("Pengaturan pengguna berhasil disimpan.");
            await logAdminActivity(currentUser, "UPDATE_USER_SETTINGS", { oldData: oldSettings, newData: dataToUpdate }, editingUserSettings);
            setIsUserSettingsModalOpen(false);
            fetchAllEmployeeDataForMonth(selectedYearAdmin, selectedMonthAdmin); 
            if (adminSelectedEmployeeForMonitor?.id === id) {
                const updatedProfileSnap = await getDoc(userDocRef);
                if (updatedProfileSnap.exists()) {
                    setAdminSelectedEmployeeForMonitor({id: id, ...updatedProfileSnap.data()});
                }
            }
        } catch (err) {
            console.error("Error saving user settings:", err);
            toast.error("Gagal menyimpan pengaturan pengguna: " + err.message);
        }
    };

    const handleSaveAppSettings = async () => {
        if (!db || !appId || !currentUser) return;
        const settingsRef = doc(db, `artifacts/${appId}/public/data/settings/app_config`);
        const oldAppSettings = {...appSettings}; 
        try {
            const newBaseSalary = parseFloat(tempAppSettings.baseSalary);
            const newOvertimeRate = parseFloat(tempAppSettings.overtimeRate);
            const newFullWorkdayHours = parseInt(tempAppSettings.fullWorkdayHours);
            const newDailyRateSystem2 = parseFloat(tempAppSettings.dailyRateSystem2);
            const newTargetHoursSystem2 = parseInt(tempAppSettings.targetHoursSystem2);

            if (isNaN(newBaseSalary) || newBaseSalary <= 0 ||
                isNaN(newOvertimeRate) || newOvertimeRate < 0 ||
                isNaN(newFullWorkdayHours) || newFullWorkdayHours <= 0 || newFullWorkdayHours > 24 ||
                isNaN(newDailyRateSystem2) || newDailyRateSystem2 <= 0 ||
                isNaN(newTargetHoursSystem2) || newTargetHoursSystem2 <= 0 || newTargetHoursSystem2 > 24) {
                toast.error("Nilai pengaturan tidak valid.");
                return;
            }
            const updatedSettings = {
                baseSalary: newBaseSalary, overtimeRate: newOvertimeRate, fullWorkdayHours: newFullWorkdayHours,
                dailyRateSystem2: newDailyRateSystem2, targetHoursSystem2: newTargetHoursSystem2,
            };
            await setDoc(settingsRef, updatedSettings, { merge: true }); 
            setAppSettings(updatedSettings); 
            toast.success("Pengaturan aplikasi berhasil disimpan.");
            await logAdminActivity(currentUser, "UPDATE_APP_SETTINGS", { oldData: oldAppSettings, newData: updatedSettings });
            setIsAppSettingsModalOpen(false);
        } catch (err) {
            toast.error("Gagal menyimpan pengaturan aplikasi: " + err.message);
        }
    };

    const handleBackupData = async () => {
        if (!db || !appId || !currentUser) {
            toast.error("Database atau admin tidak siap untuk backup.");
            return;
        }
        setIsBackingUp(true);
        toast.info("Memulai proses backup data...");

        try {
            const backupData = {
                appSettings: null,
                userRegistry: [],
                users: [], 
                backupTimestamp: new Date().toISOString(),
                appIdSource: appId,
            };

            const settingsRef = doc(db, `artifacts/${appId}/public/data/settings/app_config`);
            const settingsSnap = await getDoc(settingsRef);
            if (settingsSnap.exists()) {
                backupData.appSettings = settingsSnap.data();
            }

            const registryRef = collection(db, `artifacts/${appId}/public/data/user_registry`);
            const registrySnap = await getDocs(registryRef);
            registrySnap.forEach(doc => backupData.userRegistry.push({ id: doc.id, ...doc.data() }));

            const usersCollectionRef = collection(db, `artifacts/${appId}/users`);
            const usersSnap = await getDocs(usersCollectionRef);

            for (const userDoc of usersSnap.docs) {
                const userData = {
                    id: userDoc.id,
                    profile: userDoc.data(),
                    workRecords: []
                };
                const workRecordsRef = collection(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{userDoc.id}/work_records`);
                const workRecordsSnap = await getDocs(workRecordsRef);
                workRecordsSnap.forEach(wrDoc => userData.workRecords.push({ id: wrDoc.id, ...wrDoc.data() }));
                backupData.users.push(userData);
            }

            const jsonString = JSON.stringify(backupData, null, 2);
            const blob = new Blob([jsonString], { type: "application/json" });
            const url = URL.createObjectURL(blob);
            const link = document.createElement("a");
            link.href = url;
            link.download = `backup-gaji-<span class="math-inline">\{appId\}\-</span>{getDateString(new Date())}.json`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);

            toast.success("Backup data berhasil diunduh!");
            await logAdminActivity(currentUser, "BACKUP_DATA", { filename: link.download });

        } catch (error) {
            console.error("Error during backup:", error);
            toast.error(`Gagal melakukan backup: ${error.message}`);
        } finally {
            setIsBackingUp(false);
        }
    };

    const handleRestoreData = async () => {
        if (!restoreFile) {
            toast.warn("Pilih file backup terlebih dahulu.");
            return;
        }
        if (!db || !appId || !currentUser) {
            toast.error("Database atau admin tidak siap untuk restore.");
            return;
        }

        const userConfirmation = await new Promise(async (resolve) => {
            const ModalConfirm = ({ onConfirm, onCancel }) => (
                <div className="fixed inset-0 bg-black bg-opacity-70 backdrop-blur-sm flex items-center justify-center p-4 z-[100]">
                    <div className={`p-6 rounded-xl shadow-2xl w-full max-w-lg ${theme === 'dark' ? 'bg-slate-800 text-slate-200' : 'bg-white text-slate-800'}`}>
                        <h3 className="text-lg font-semibold mb-4 flex items-center gap-2"><AlertTriangle className="text-red-500"/>Konfirmasi Restore Data</h3>
                        <p className="mb-2 text-sm">Anda akan me-restore data dari file: <span className="font-mono text-xs">{restoreFile.name}</span>.</p>
                        <p className="mb-6 text-sm text-red-600 dark:text-red-400 font-semibold">PERINGATAN: Proses ini akan MENIMPA data yang ada di database dengan data dari file backup. Beberapa data mungkin akan dihapus jika tidak ada di file backup. Tindakan ini TIDAK DAPAT DIBATALKAN. Pastikan Anda menggunakan file backup yang benar.</p>
                        <div className="flex justify-end gap-3">
                            <button onClick={() => onCancel(false)} className={`px-4 py-2 rounded-lg text-sm font-medium border ${theme === 'dark' ? 'border-slate-600 hover:bg-slate-700' : 'border-gray-300 hover:bg-gray-100'}`}>Batal</button>
                            <button onClick={() => onConfirm(true)} className={`px-4 py-2 rounded-lg text-sm font-medium text-white ${theme === 'dark' ? 'bg-red-700 hover:bg-red-800' : 'bg-red-600 hover:bg-red-700'}`}>Ya, Saya Mengerti & Lanjutkan Restore</button>
                        </div>
                    </div>
                </div>
            );
            const modalRoot = document.createElement('div');
            document.body.appendChild(modalRoot);
            const { createRoot } = await import('react-dom/client'); 
            const root = createRoot(modalRoot);
            root.render(<ModalConfirm 
                onConfirm={(res) => { root.unmount(); modalRoot.remove(); resolve(res); }} 
                onCancel={(res) => { root.unmount(); modalRoot.remove(); resolve(res); }} 
            />);
        });

        if (!userConfirmation) {
            toast.info("Proses restore dibatalkan.");
            return;
        }

        setIsRestoring(true);
        toast.info("Memulai proses restore data...");

        const reader = new FileReader();
        reader.onload = async (event) => {
            try {
                const backupData = JSON.parse(event.target.result);

                if (backupData.appIdSource && backupData.appIdSource !== appId) {
                    toast.error(`File backup ini untuk aplikasi lain (<span class="math-inline">\{backupData\.appIdSource\}\)\. Tidak dapat direstore ke aplikasi ini \(</span>{appId}).`);
                    setIsRestoring(false);
                    return;
                }
                
                const batch = writeBatch(db);

                if (backupData.appSettings) {
                    const settingsRef = doc(db, `artifacts/${appId}/public/data/settings/app_config`);
                    batch.set(settingsRef, backupData.appSettings);
                }

                const currentRegistrySnap = await getDocs(collection(db, `artifacts/${appId}/public/data/user_registry`));
                currentRegistrySnap.forEach(doc => batch.delete(doc.ref)); 
                if (backupData.userRegistry) {
                    backupData.userRegistry.forEach(regEntry => {
                        const regRef = doc(db, `artifacts/${appId}/public/data/user_registry`, regEntry.id);
                        const { id, ...dataToSet } = regEntry;
                        batch.set(regRef, dataToSet);
                    });
                }
                
                const currentUsersSnap = await getDocs(collection(db, `artifacts/${appId}/users`));
                for (const userDoc of currentUsersSnap.docs) {
                    const currentWorkRecordsSnap = await getDocs(collection(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{userDoc.id}/work_records`));
                    currentWorkRecordsSnap.forEach(wrDoc => batch.delete(wrDoc.ref));
                    batch.delete(userDoc.ref);
                }

                if (backupData.users) {
                    for (const userData of backupData.users) {
                        const userProfileRef = doc(db, `artifacts/${appId}/users`, userData.id);
                        const { id, workRecords, ...profileData } = userData;
                        batch.set(userProfileRef, profileData.profile); 

                        if (workRecords) {
                            workRecords.forEach(wrEntry => {
                                const wrRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{userData.id}/work_records`, wrEntry.id);
                                const { id: wrId, ...wrDataToSet } = wrEntry;
                                batch.set(wrRef, wrDataToSet);
                            });
                        }
                    }
                }
                
                await batch.commit();
                toast.success("Data berhasil direstore! Aplikasi mungkin perlu di-refresh.");
                await logAdminActivity(currentUser, "RESTORE_DATA", { filename: restoreFile.name });
                window.location.reload();

            } catch (error) {
                console.error("Error during restore:", error);
                toast.error(`Gagal me-restore data: ${error.message}. Pastikan format file JSON benar.`);
            } finally {
                setIsRestoring(false);
                setRestoreFile(null);
                setIsBackupRestoreModalOpen(false);
            }
        };
        reader.readAsText(restoreFile);
    };

    const fetchAdminActivityLogs = useCallback(async (loadMore = false) => {
        if (!db || !appId || !isAdmin) return;
        setIsLoadingAdminLogs(true);
    
        const logsRef = collection(db, `artifacts/${appId}/public/data/admin_activity_logs`);
        let q;
    
        if (loadMore && lastVisibleLog) {
            const lastTimestamp = lastVisibleLog.timestamp instanceof Timestamp ? lastVisibleLog.timestamp : Timestamp.fromDate(new Date(lastVisibleLog.timestamp.seconds * 1000));
            q = query(logsRef, orderBy("timestamp", "desc"), limit(15), where("timestamp", "<", lastTimestamp));
        } else {
            q = query(logsRef, orderBy("timestamp", "desc"), limit(15));
            setAdminActivityLogs([]); 
        }
    
        try {
            const querySnapshot = await getDocs(q);
            const newLogs = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            
            setAdminActivityLogs(prevLogs => loadMore ? [...prevLogs, ...newLogs] : newLogs);
            setLastVisibleLog(querySnapshot.docs[querySnapshot.docs.length - 1]);
            setHasMoreLogs(newLogs.length === 15);
        } catch (error) {
            console.error("Error fetching admin activity logs:", error);
            toast.error("Gagal memuat log aktivitas admin.");
        } finally {
            setIsLoadingAdminLogs(false);
        }
    }, [appId, db, isAdmin, lastVisibleLog]); 

    useEffect(() => {
        if (isAdmin && db && appId && activeAdminTab === 'activityLog') { 
            if (adminActivityLogs.length === 0 && hasMoreLogs) { 
                fetchAdminActivityLogs(false); 
            }
        }
    }, [isAdmin, db, appId, activeAdminTab, fetchAdminActivityLogs, adminActivityLogs.length, hasMoreLogs]);


    const fetchAttendanceAnalytics = useCallback(async (year, month) => {
        if (!db || !appId || !isAdmin || !currentUser) return;
        setIsLoadingAnalytics(true);
        setAttendanceAnalyticsData([]);
    
        try {
            const userRegistryRef = collection(db, `artifacts/${appId}/public/data/user_registry`);
            const registrySnap = await getDocs(query(userRegistryRef)); 
    
            const analyticsPromises = registrySnap.docs.map(async (userDocInRegistry) => {
                const employeeDataFromRegistry = userDocInRegistry.data();
                const empId = employeeDataFromRegistry.userId || userDocInRegistry.id;
                if (!empId) return null;
    
                const userProfileRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{empId}`);
                const userProfileSnap = await getDoc(userProfileRef);
    
                if (!userProfileSnap.exists() || !userProfileSnap.data().isActive) {
                    return null; 
                }
                const profileData = userProfileSnap.data();
    
                const workLogCollectionRef = collection(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{empId}/work_records`);
                const monthString = `<span class="math-inline">\{year\}\-</span>{String(month + 1).padStart(2, '0')}`;
                const qLogs = query(workLogCollectionRef, where("monthYear", "==", monthString), where("userId", "==", empId));
                const workRecordsSnap = await getDocs(qLogs);
                
                const empWorkLog = {};
                workRecordsSnap.forEach(logDoc => {
                    empWorkLog[logDoc.data().dateStr] = { ...logDoc.data(), id: logDoc.id };
                });
    
                const salaryData = calculateSalary(empWorkLog, year, month, appSettings, profileData);
                
                let daysAbsentWithReason = 0;
                let daysAbsentWithoutReason = 0;
                const effectiveWorkDaysInMonth = getEffectiveWorkDaysArray(year, month);

                effectiveWorkDaysInMonth.forEach(dateStr => {
                    const log = empWorkLog[dateStr];
                    if (!log) { 
                        daysAbsentWithoutReason++;
                    } else if (log.entryMethod === 'absence_reason') {
                        daysAbsentWithReason++;
                    } else if (log.totalWorkDurationMinutes === 0) { 
                        const logDate = new Date(dateStr + "T00:00:00");
                        if (logDate.getDay() !== 0) { 
                             daysAbsentWithoutReason++;
                        } else if (profileData.salarySystemType === 1) {
                            let absentInWeek = false;
                            const mondayOfThisWeek = getMonday(logDate);
                            for (let i = 0; i < 6; i++) {
                                const checkDate = new Date(mondayOfThisWeek);
                                checkDate.setDate(mondayOfThisWeek.getDate() + i);
                                const checkDateStr = getDateString(checkDate);
                                const logForCheckDate = empWorkLog[checkDateStr];
                                if (!logForCheckDate || (logForCheckDate.totalWorkDurationMinutes === 0 && logForCheckDate.entryMethod !== 'absence_reason')) {
                                    absentInWeek = true;
                                    break;
                                }
                            }
                            if (absentInWeek) daysAbsentWithoutReason++; 
                        }
                    }
                });
    
                return {
                    id: empId,
                    name: profileData.name,
                    email: profileData.email,
                    daysPresent: salaryData.daysPresentSystem1 || salaryData.daysWorkedSystem2 || 0,
                    daysAbsentWithReason,
                    daysAbsentWithoutReason,
                    totalOvertimeHours: salaryData.totalOvertimeHours || 0,
                    totalOvertimeMinutes: salaryData.totalOvertimeMinutes || 0,
                };
            });
    
            const results = (await Promise.all(analyticsPromises)).filter(Boolean);
            setAttendanceAnalyticsData(results);
    
        } catch (err) {
            console.error("Error fetching attendance analytics:", err);
            toast.error("Gagal mengambil data analitik kehadiran.");
        } finally {
            setIsLoadingAnalytics(false);
        }
    }, [appId, db, isAdmin, currentUser, calculateSalary, appSettings]);

    useEffect(() => {
        if (isAdmin && db && currentUser && activeAdminTab === 'analytics') { 
            fetchAttendanceAnalytics(selectedYearAnalytics, selectedMonthAnalytics);
        }
    }, [isAdmin, db, currentUser, activeAdminTab, selectedYearAnalytics, selectedMonthAnalytics, fetchAttendanceAnalytics]);


    const renderAuthForm = (isLogin) => (
        <div className={`min-h-screen ${theme === 'dark' ? 'bg-slate-900' : 'bg-gradient-to-br from-indigo-600 to-purple-600'} flex flex-col justify-center items-center p-4 transition-colors duration-300`}>
            <button onClick={toggleTheme} className={`absolute top-4 right-4 p-2 rounded-full ${theme === 'dark' ? 'bg-slate-700 text-yellow-400' : 'bg-white text-indigo-600'} shadow-md`}>
                {theme === 'light' ? <Moon size={20} /> : <Sun size={20} />}
            </button>
            <div className={`${theme === 'dark' ? 'bg-slate-800' : 'bg-white'} p-8 sm:p-10 rounded-xl shadow-2xl w-full max-w-md`}>
                <div className="flex flex-col items-center mb-6">
                    <h2 className={`text-3xl font-bold text-center ${theme === 'dark' ? 'text-white' : 'text-slate-800'} mb-2`}>
                        {isLogin ? 'Login Karyawan' : 'Registrasi Akun'}
                    </h2>
                    <p className={`text-xl font-semibold ${theme === 'dark' ? 'text-indigo-400' : 'text-indigo-600'} mb-6`}>Akad Kita</p>
                </div>
                <form onSubmit={isLogin ? handleLogin : handleRegister} className="space-y-6">
                    {!isLogin && (
                        <div>
                            <label htmlFor="name-register" className={`block text-sm font-medium ${theme === 'dark' ? 'text-slate-300' : 'text-gray-700'}`}>Nama Lengkap</label>
                            <input
                                id="name-register" 
                                type="text"
                                value={name} 
                                onChange={(e) => setName(e.target.value)}
                                required={!isLogin}
                                className={`mt-1 block w-full px-4 py-3 border ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white placeholder-slate-400' : 'border-gray-300 placeholder-gray-400'} rounded-lg shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm`}
                                placeholder="Masukkan nama lengkap Anda"
                            />
                        </div>
                    )}
                    <div>
                        <label htmlFor="email-auth" className={`block text-sm font-medium ${theme === 'dark' ? 'text-slate-300' : 'text-gray-700'}`}>Alamat Email</label>
                        <input
                            id="email-auth" 
                            type="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            required
                            className={`mt-1 block w-full px-4 py-3 border ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white placeholder-slate-400' : 'border-gray-300 placeholder-gray-400'} rounded-lg shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm`}
                            placeholder="nama@contoh.com"
                        />
                    </div>
                    <div>
                        <label htmlFor="password-auth" className={`block text-sm font-medium ${theme === 'dark' ? 'text-slate-300' : 'text-gray-700'}`}>Password</label>
                        <div className="relative">
                            <input
                                id="password-auth" 
                                type={showPassword ? "text" : "password"}
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                required
                                className={`mt-1 block w-full px-4 py-3 border ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white placeholder-slate-400' : 'border-gray-300 placeholder-gray-400'} rounded-lg shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm pr-10`}
                                placeholder="Minimal 6 karakter"
                            />
                            <button type="button" onClick={() => setShowPassword(!showPassword)} className={`absolute inset-y-0 right-0 pr-3 flex items-center text-sm leading-5 ${theme === 'dark' ? 'text-slate-400 hover:text-slate-200' : 'text-gray-500 hover:text-gray-700'}`}>
                                {showPassword ? <EyeOff size={18}/> : <Eye size={18}/>}
                            </button>
                        </div>
                    </div>
                    <button
                        type="submit"
                        className="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out"
                    >
                        {isLogin ? 'Login' : 'Registrasi'}
                    </button>
                </form>
                <p className={`mt-8 text-center text-sm ${theme === 'dark' ? 'text-slate-400' : 'text-gray-600'}`}>
                    {isLogin ? "Belum punya akun? " : "Sudah punya akun? "}
                    <button
                        onClick={() => {
                            setPage(isLogin ? 'register' : 'login');
                            setEmail(''); setPassword(''); setName('');
                        }}
                        className="font-medium text-indigo-500 hover:text-indigo-400"
                    >
                        {isLogin ? 'Registrasi di sini' : 'Login di sini'}
                    </button>
                </p>
            </div>
             <footer className={`text-center text-sm ${theme === 'dark' ? 'text-slate-500' : 'text-indigo-100'} mt-8`}>
                Aplikasi Gaji Karyawan Akad Kita &copy; 2025
            </footer>
        </div>
    );

    const EmployeeDashboard = () => {
        const [selectedDateInput, setSelectedDateInput] = useState(getDateString(new Date()));
        const [entryMode, setEntryMode] = useState('clock'); 
        const [manualHours, setManualHours] = useState('');
        const [manualMinutes, setManualMinutes] = useState('');
        const [absenceReason, setAbsenceReason] = useState('');

        const currentDayLog = useMemo(() => {
            return workLog[selectedDateInput] || null;
        }, [selectedDateInput, workLog]);

        const isToday = useMemo(() => {
            const todayStr = getDateString(new Date());
            return selectedDateInput === todayStr;
        }, [selectedDateInput]);
        
        const todayDateOnlyString = getDateString(new Date()); 
        const isFutureDate = selectedDateInput > todayDateOnlyString; 

        const isRecordEditableByEmployee = useMemo(() => {
            if (isFutureDate) return false;
            if (isToday) return true; 
            return !currentDayLog || currentDayLog.entryMethod === 'absence_reason'; 
        }, [selectedDateInput, currentDayLog, isToday, isFutureDate]);

        const activeSession = useMemo(() => {
            if (currentDayLog && currentDayLog.entryMethod === 'multi_session_clock' && Array.isArray(currentDayLog.sessions)) {
                return currentDayLog.sessions.find(session => session.clockIn && !session.clockOut);
            }
            return null;
        }, [currentDayLog]);


        const handleClockAction = async () => {
            if (!userId || !db || !appId || !isRecordEditableByEmployee) {
                if (!isRecordEditableByEmployee && currentDayLog && currentDayLog.entryMethod !== 'absence_reason') toast.warn("Data untuk tanggal lampau yang sudah ada (selain keterangan tidak masuk) tidak bisa diubah.");
                else if (isFutureDate) toast.warn("Tidak bisa mencatat untuk tanggal di masa depan.");
                return;
            }
        
            const dateObj = new Date(selectedDateInput + "T00:00:00");
            const dateStr = selectedDateInput;
            const monthYear = `<span class="math-inline">\{dateObj\.getFullYear\(\)\}\-</span>{String(dateObj.getMonth() + 1).padStart(2, '0')}`;
            const recordPath = `artifacts/<span class="math-inline">\{appId\}/users/</span>{userId}/work_records`;
            const recordRef = doc(db, recordPath, dateStr); 
        
            try {
                const docSnap = await getDoc(recordRef);
                let currentData = docSnap.exists() ? docSnap.data() : null;
                let sessions = (currentData?.sessions && Array.isArray(currentData.sessions)) ? [...currentData.sessions] : [];
                let newTotalWorkDurationMinutes = currentData?.totalWorkDurationMinutes || 0;
        
                const now = new Date(); 
                const clientTimestamp = Timestamp.fromDate(now); 

                if (activeSession) { 
                    const sessionIndex = sessions.findIndex(s => s.clockIn && !s.clockOut);
                    if (sessionIndex !== -1) {
                        sessions[sessionIndex].clockOut = clientTimestamp; 
                        
                        const clockInDate = sessions[sessionIndex].clockIn.toDate(); 
                        const durationMs = now.getTime() - clockInDate.getTime();
                        sessions[sessionIndex].durationMinutes = Math.max(0, Math.round(durationMs / (1000 * 60)));
                        
                        newTotalWorkDurationMinutes = sessions.reduce((acc, curr) => acc + (curr.durationMinutes || 0), 0);
                        toast.success(`Sesi diakhiri pukul ${formatTime(clientTimestamp)}. Durasi sesi: ${formatDuration(sessions[sessionIndex].durationMinutes)}`);
                    }
                } else { 
                    sessions.push({ clockIn: clientTimestamp, clockOut: null, durationMinutes: 0 }); 
                    toast.success(`Sesi baru dimulai pukul ${formatTime(clientTimestamp)}.`);
                }
        
                const dataToSave = {
                    dateStr: dateStr,
                    monthYear: monthYear,
                    userId: userId,
                    entryMethod: 'multi_session_clock',
                    sessions: sessions,
                    totalWorkDurationMinutes: newTotalWorkDurationMinutes,
                    absenceReason: null, 
                    lastUpdated: serverTimestamp() 
                };
        
                await setDoc(recordRef, dataToSave); 
                fetchWorkLogForMonth(userId, dateObj.getFullYear(), dateObj.getMonth()).then(logData => setWorkLog(logData));
        
            } catch (err) {
                console.error("Error handling clock action (multi-session):", err);
                toast.error("Gagal melakukan aksi clock: " + err.message);
            }
        };


        const handleManualSubmit = async (e) => {
            e.preventDefault();
            if (!userId || !db || !appId || !isRecordEditableByEmployee) {
                if(!isRecordEditableByEmployee && currentDayLog && currentDayLog.entryMethod !== 'absence_reason') toast.warn("Data untuk tanggal lampau yang sudah ada (selain keterangan tidak masuk) tidak bisa diubah.");
                else if (isFutureDate) toast.warn("Tidak bisa mencatat untuk tanggal di masa depan.");
                return;
            }

            const totalMinutes = (parseInt(manualHours) || 0) * 60 + (parseInt(manualMinutes) || 0);
            if (totalMinutes < 0) { 
                toast.error("Total jam kerja tidak boleh negatif.");
                return;
            }
             if ( (parseInt(manualHours) || 0) > 23 || (parseInt(manualMinutes) || 0) > 59) {
                toast.error("Format jam atau menit tidak valid.");
                return;
            }
            if (totalMinutes === 0 && entryMode === 'manual') { 
                toast.warn("Total jam kerja tidak boleh 0. Gunakan mode 'Keterangan Tidak Masuk' jika absen.");
                return;
            }

            const dateObj = new Date(selectedDateInput + "T00:00:00");
            const dateStr = selectedDateInput;
            const monthYear = `<span class="math-inline">\{dateObj\.getFullYear\(\)\}\-</span>{String(dateObj.getMonth() + 1).padStart(2, '0')}`;
            const recordPath = `artifacts/<span class="math-inline">\{appId\}/users/</span>{userId}/work_records`;
            const recordRef = doc(db, recordPath, dateStr); 
            
            const dataToSave = {
                dateStr: dateStr, monthYear: monthYear, userId: userId,
                sessions: [], 
                totalWorkDurationMinutes: totalMinutes, 
                entryMethod: 'manual', 
                lastUpdated: serverTimestamp(),
                absenceReason: null 
            };

            try {
                await setDoc(recordRef, dataToSave);
                toast.success(`Data kerja manual untuk ${dateStr} berhasil disimpan.`);
                fetchWorkLogForMonth(userId, dateObj.getFullYear(), dateObj.getMonth()).then(logData => setWorkLog(logData));
            } catch (err) {
                toast.error("Gagal menyimpan data kerja manual: " + err.message);
            }
        };

        const handleAbsenceReasonSubmit = async (e) => {
            e.preventDefault();
            if (!absenceReason.trim()) {
                toast.error("Alasan tidak masuk wajib diisi.");
                return;
            }
            if (!userId || !db || !appId || !isRecordEditableByEmployee) {
                if(!isRecordEditableByEmployee) toast.warn("Data untuk tanggal lampau yang sudah ada tidak bisa diubah.");
                else if (isFutureDate) toast.warn("Tidak bisa mencatat untuk tanggal di masa depan.");
                return;
            }

            const dateObj = new Date(selectedDateInput + "T00:00:00");
            const dateStr = selectedDateInput;
            const monthYear = `<span class="math-inline">\{dateObj\.getFullYear\(\)\}\-</span>{String(dateObj.getMonth() + 1).padStart(2, '0')}`;
            const recordPath = `artifacts/<span class="math-inline">\{appId\}/users/</span>{userId}/work_records`;
            const recordRef = doc(db, recordPath, dateStr); 

            const dataToSave = {
                dateStr: dateStr, monthYear: monthYear, userId: userId,
                sessions: [], 
                totalWorkDurationMinutes: 0, 
                entryMethod: 'absence_reason', 
                absenceReason: absenceReason.trim(),
                lastUpdated: serverTimestamp()
            };

            try {
                await setDoc(recordRef, dataToSave);
                toast.success(`Keterangan tidak masuk untuk ${dateStr} berhasil disimpan.`);
                fetchWorkLogForMonth(userId, dateObj.getFullYear(), dateObj.getMonth()).then(logData => setWorkLog(logData));
            } catch (err) {
                toast.error("Gagal menyimpan keterangan tidak masuk: " + err.message);
            }
        };
        
        useEffect(() => {
            if (currentDayLog) {
                if (currentDayLog.entryMethod === 'manual' && currentDayLog.totalWorkDurationMinutes != null) {
                    setManualHours(Math.floor(currentDayLog.totalWorkDurationMinutes / 60).toString());
                    setManualMinutes((currentDayLog.totalWorkDurationMinutes % 60).toString());
                } else {
                    setManualHours(''); setManualMinutes('');
                }
                if (currentDayLog.entryMethod === 'absence_reason' && currentDayLog.absenceReason) {
                    setAbsenceReason(currentDayLog.absenceReason);
                } else {
                    setAbsenceReason('');
                }
            } else { 
                setManualHours(''); setManualMinutes('');
                setAbsenceReason(''); 
            }
        }, [selectedDateInput, currentDayLog]); 


        let clockButtonText = activeSession ? "Akhiri Sesi Saat Ini" : "Mulai Sesi Baru";
        let clockStatusText = "Anda belum memulai sesi kerja hari ini.";
        if (currentDayLog) {
            if (currentDayLog.entryMethod === 'multi_session_clock' && currentDayLog.sessions && currentDayLog.sessions.length > 0) {
                const completedSessions = currentDayLog.sessions.filter(s => s.clockIn && s.clockOut);
                if (activeSession) {
                    clockStatusText = `Sesi aktif dimulai pukul ${formatTime(activeSession.clockIn)}.`;
                    if (completedSessions.length > 0) {
                        clockStatusText += ` Total ${completedSessions.length} sesi selesai hari ini.`;
                    }
                } else if (completedSessions.length > 0) {
                    clockStatusText = `Total ${completedSessions.length} sesi kerja selesai. Total durasi: ${formatDuration(currentDayLog.totalWorkDurationMinutes || 0)}.`;
                    clockButtonText = isToday ? "Mulai Sesi Baru" : "Sesi Selesai";
                }
            } else if (currentDayLog.entryMethod === 'manual' && currentDayLog.totalWorkDurationMinutes != null) {
                clockStatusText = `Data manual tersimpan: ${formatDuration(currentDayLog.totalWorkDurationMinutes)}.`;
                clockButtonText = "Mode Input Manual"; 
            } else if (currentDayLog.entryMethod === 'absence_reason') { 
                clockStatusText = `Keterangan: Tidak Masuk. Alasan: ${currentDayLog.absenceReason || '(tidak ada alasan)'}`;
                clockButtonText = "Keterangan Tersimpan"; 
            }
        }


        const monthDays = [];
        const firstDayOfMonth = new Date(currentDateDisplay.getFullYear(), currentDateDisplay.getMonth(), 1).getDay(); 
        const daysInSelectedMonth = getDaysInMonth(currentDateDisplay.getFullYear(), currentDateDisplay.getMonth());
        for(let i = 0; i < firstDayOfMonth; i++) monthDays.push(<div key={`empty-${i}`} className="p-2"></div>); 
        for(let day = 1; day <= daysInSelectedMonth; day++) {
            const dateStr = `<span class="math-inline">\{currentDateDisplay\.getFullYear\(\)\}\-</span>{String(currentDateDisplay.getMonth() + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
            const logForDay = workLog[dateStr];
            let bgColor = theme === 'dark' ? 'bg-slate-700 hover:bg-slate-600' : 'bg-white hover:bg-gray-100';
            
            if (logForDay) {
                if (logForDay.entryMethod === 'absence_reason') {
                    bgColor = theme === 'dark' ? 'bg-yellow-700 hover:bg-yellow-600' : 'bg-yellow-200 hover:bg-yellow-300'; 
                } else if (logForDay.totalWorkDurationMinutes > 0) {
                    bgColor = theme === 'dark' ? 'bg-green-700 hover:bg-green-600' : 'bg-green-200 hover:bg-green-300';
                } else if (logForDay.entryMethod === 'multi_session_clock' && logForDay.sessions && logForDay.sessions.find(s=>s.clockIn && !s.clockOut)) { 
                     bgColor = theme === 'dark' ? 'bg-sky-700 hover:bg-sky-600' : 'bg-sky-200 hover:bg-sky-300'; 
                } else if (logForDay.entryMethod === 'manual' || (logForDay.entryMethod === 'multi_session_clock' && logForDay.sessions && logForDay.sessions.length > 0)) { 
                     bgColor = theme === 'dark' ? 'bg-amber-700 hover:bg-amber-600' : 'bg-amber-200 hover:bg-amber-300';
                }
            }

            if(dateStr === selectedDateInput) bgColor = theme === 'dark' ? 'bg-indigo-600 text-white' : 'bg-indigo-500 text-white';

            monthDays.push(
                <div 
                    key={day} 
                    onClick={() => setSelectedDateInput(dateStr)}
                    className={`p-2 text-center border rounded-md cursor-pointer transition-colors ${bgColor} ${theme === 'dark' ? 'border-slate-600' : 'border-gray-300'}`}
                >
                    {day}
                    {logForDay && logForDay.entryMethod !== 'absence_reason' && <div className="text-xs mt-1">{formatDuration(logForDay.totalWorkDurationMinutes)}</div>}
                    {logForDay && logForDay.entryMethod === 'absence_reason' && <div className="text-xs mt-1 text-yellow-800 dark:text-yellow-300">Absen</div>}
                </div>
            );
        }


        return (
            <div className={`container mx-auto p-4 md:p-6 ${theme === 'dark' ? 'bg-slate-900 text-slate-200' : 'bg-gray-50 text-slate-800'} min-h-screen transition-colors duration-300`}>
                <header className="mb-6 flex flex-col sm:flex-row justify-between items-center">
                    <div className="flex items-center gap-3">
                        <Clock size={32} className="text-indigo-500" />
                        <h1 className="text-2xl sm:text-3xl font-bold">Dasbor Karyawan Akad Kita</h1>
                    </div>
                    <div className="flex items-center gap-4 mt-4 sm:mt-0">
                        <button onClick={() => setIsProfileModalOpen(true)} className={`p-2 rounded-full ${theme === 'dark' ? 'bg-slate-700 hover:bg-slate-600' : 'bg-white hover:bg-gray-200'} shadow-md`} title="Pengaturan Profil">
                            <User size={20} />
                        </button>
                        <button onClick={toggleTheme} className={`p-2 rounded-full ${theme === 'dark' ? 'bg-slate-700 text-yellow-400 hover:bg-slate-600' : 'bg-white text-indigo-600 hover:bg-gray-200'} shadow-md`}>
                            {theme === 'light' ? <Moon size={20} /> : <Sun size={20} />}
                        </button>
                        <button
                            onClick={handleLogout}
                            className={`flex items-center gap-2 ${theme === 'dark' ? 'bg-red-600 hover:bg-red-700' : 'bg-red-500 hover:bg-red-600'} text-white font-semibold py-2 px-4 rounded-lg shadow transition duration-150`}
                        >
                            <LogOut size={18}/> Logout
                        </button>
                    </div>
                </header>
                {currentUser && <p className="mb-6 text-lg">Selamat datang, <span className="font-semibold">{ userName || currentUser.email}</span>!</p>}
                
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    <div className={`lg:col-span-2 p-6 rounded-xl shadow-lg ${theme === 'dark' ? 'bg-slate-800' : 'bg-white'}`}>
                        <h2 className="text-xl font-semibold mb-1">Catat Kehadiran</h2>
                        <p className={`text-sm mb-4 ${theme === 'dark' ? 'text-slate-400' : 'text-slate-500'}`}>
                            {!isRecordEditableByEmployee && currentDayLog && currentDayLog.entryMethod !== 'absence_reason' ? "Data untuk tanggal lampau yang sudah ada (selain keterangan tidak masuk) tidak bisa diubah." : "Anda bisa mencatat atau mengubah data untuk hari ini atau menambahkan data baru untuk tanggal lampau." }
                        </p>
                        <div className="mb-4">
                            <label htmlFor="workDate" className="block text-sm font-medium mb-1">Tanggal Terpilih</label>
                            <input
                                type="date" id="workDate" value={selectedDateInput}
                                onChange={(e) => setSelectedDateInput(e.target.value)}
                                max={todayDateOnlyString} 
                                className={`mt-1 block w-full px-3 py-2 border ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'} rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm`}
                            />
                            {isFutureDate && <p className="text-xs text-red-500 mt-1">Tidak dapat memilih tanggal di masa depan.</p>}
                        </div>

                        <div className="my-6">
                            <label className="block text-sm font-medium mb-1">Mode Input</label>
                            <div className="mt-1 grid grid-cols-1 sm:grid-cols-3 gap-2">
                                <label className={`p-3 border rounded-lg cursor-pointer transition-all ${entryMode === 'clock' ? 'bg-indigo-500 text-white border-indigo-500' : (theme === 'dark' ? 'border-slate-600 hover:border-slate-500' : 'border-gray-300 hover:border-gray-400')}`}>
                                    <input type="radio" name="entryMode" value="clock" checked={entryMode === 'clock'} onChange={() => setEntryMode('clock')} className="sr-only"/>
                                    <div className="flex items-center justify-center gap-2 text-sm"><Clock size={16}/> Sesi Kerja (Clock)</div>
                                </label>
                                <label className={`p-3 border rounded-lg cursor-pointer transition-all ${entryMode === 'manual' ? 'bg-indigo-500 text-white border-indigo-500' : (theme === 'dark' ? 'border-slate-600 hover:border-slate-500' : 'border-gray-300 hover:border-gray-400')}`}>
                                    <input type="radio" name="entryMode" value="manual" checked={entryMode === 'manual'} onChange={() => setEntryMode('manual')} className="sr-only"/>
                                     <div className="flex items-center justify-center gap-2 text-sm"><CalendarDays size={16}/> Input Total Jam</div>
                                </label>
                                <label className={`p-3 border rounded-lg cursor-pointer transition-all ${entryMode === 'absence_reason' ? 'bg-indigo-500 text-white border-indigo-500' : (theme === 'dark' ? 'border-slate-600 hover:border-slate-500' : 'border-gray-300 hover:border-gray-400')}`}>
                                    <input type="radio" name="entryMode" value="absence_reason" checked={entryMode === 'absence_reason'} onChange={() => setEntryMode('absence_reason')} className="sr-only"/>
                                     <div className="flex items-center justify-center gap-2 text-sm"><ClipboardX size={16}/> Ket. Tidak Masuk</div>
                                </label>
                            </div>
                        </div>

                        {entryMode === 'clock' && (
                            <div className="space-y-4 mt-4">
                                <p className={`text-sm min-h-[40px] p-3 rounded-md ${theme === 'dark' ? 'bg-slate-700 text-slate-300' : 'bg-gray-100 text-gray-700'}`}>{clockStatusText}</p>
                                {currentDayLog && currentDayLog.entryMethod === 'multi_session_clock' && currentDayLog.sessions && currentDayLog.sessions.length > 0 && (
                                    <div className={`space-y-2 p-3 rounded-md border ${theme === 'dark' ? 'border-slate-600 bg-slate-750' : 'border-gray-200 bg-gray-50'}`}>
                                        <h4 className="text-xs font-semibold">Sesi Tercatat:</h4>
                                        {currentDayLog.sessions.map((session, index) => (
                                            <div key={index} className="text-xs">
                                                Sesi {index + 1}: {formatTime(session.clockIn)} - {session.clockOut ? formatTime(session.clockOut) : '(Aktif)'}
                                                {session.clockOut && ` (${formatDuration(session.durationMinutes || 0)})`}
                                            </div>
                                        ))}
                                    </div>
                                )}
                                <button 
                                    onClick={handleClockAction}
                                    disabled={isFutureDate || isLoadingData || !isRecordEditableByEmployee || (currentDayLog && currentDayLog.entryMethod !== 'multi_session_clock' && currentDayLog.entryMethod !== 'absence_reason' && !isToday) } 
                                    className={`w-full flex items-center justify-center gap-2 ${theme === 'dark' ? (activeSession ? 'bg-orange-600 hover:bg-orange-700' : 'bg-sky-600 hover:bg-sky-700') : (activeSession ? 'bg-orange-500 hover:bg-orange-600' : 'bg-blue-600 hover:bg-blue-700')} text-white font-semibold py-2.5 px-4 rounded-lg shadow transition duration-150 disabled:opacity-50`}
                                >
                                    {activeSession ? <MinusCircle size={18}/> : <PlusCircle size={18}/>} {clockButtonText}
                                </button>
                            </div>
                        )}

                        {entryMode === 'manual' && (
                             <form onSubmit={handleManualSubmit} className="space-y-4 mt-4">
                                <div>
                                    <label htmlFor="manualHours" className="block text-sm font-medium mb-1">Total Jam Kerja</label>
                                    <input
                                        type="number" id="manualHours" value={manualHours}
                                        onChange={(e) => setManualHours(e.target.value)}
                                        min="0" max="23"
                                        className={`mt-1 block w-full px-3 py-2 border ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'} rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:opacity-70`}
                                        placeholder="Jam" required disabled={!isRecordEditableByEmployee || (currentDayLog && currentDayLog.entryMethod === 'absence_reason')}
                                    />
                                </div>
                                <div>
                                    <label htmlFor="manualMinutes" className="block text-sm font-medium mb-1">Total Menit Kerja</label>
                                    <input
                                        type="number" id="manualMinutes" value={manualMinutes}
                                        onChange={(e) => setManualMinutes(e.target.value)}
                                        min="0" max="59"
                                        className={`mt-1 block w-full px-3 py-2 border ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'} rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:opacity-70`}
                                        placeholder="Menit" required disabled={!isRecordEditableByEmployee || (currentDayLog && currentDayLog.entryMethod === 'absence_reason')}
                                    />
                                </div>
                                <button 
                                    type="submit" disabled={isFutureDate || isLoadingData || !isRecordEditableByEmployee || (currentDayLog && currentDayLog.entryMethod === 'absence_reason')}
                                    className={`w-full flex items-center justify-center gap-2 ${theme === 'dark' ? 'bg-emerald-600 hover:bg-emerald-700' : 'bg-green-600 hover:bg-green-700'} text-white font-semibold py-2.5 px-4 rounded-lg shadow transition duration-150 disabled:opacity-50`}
                                >
                                  <Save size={18}/>  {isLoadingData ? "Menyimpan..." : "Simpan Total Jam Kerja"}
                                </button>
                            </form>
                        )}
                        
                        {entryMode === 'absence_reason' && (
                            <form onSubmit={handleAbsenceReasonSubmit} className="space-y-4 mt-4">
                                <div>
                                    <label htmlFor="absenceReason" className="block text-sm font-medium mb-1">Alasan Tidak Masuk</label>
                                    <textarea
                                        id="absenceReason" value={absenceReason}
                                        onChange={(e) => setAbsenceReason(e.target.value)}
                                        rows="3"
                                        className={`mt-1 block w-full px-3 py-2 border ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'} rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm disabled:opacity-70`}
                                        placeholder="Masukkan alasan Anda tidak masuk kerja..." required disabled={!isRecordEditableByEmployee}
                                    />
                                </div>
                                <button 
                                    type="submit" disabled={isFutureDate || isLoadingData || !isRecordEditableByEmployee}
                                    className={`w-full flex items-center justify-center gap-2 ${theme === 'dark' ? 'bg-yellow-600 hover:bg-yellow-700' : 'bg-yellow-500 hover:bg-yellow-600'} text-white font-semibold py-2.5 px-4 rounded-lg shadow transition duration-150 disabled:opacity-50`}
                                >
                                  <Save size={18}/>  {isLoadingData ? "Menyimpan..." : "Simpan Keterangan"}
                                </button>
                                 {currentDayLog && currentDayLog.entryMethod === 'absence_reason' && (
                                    <p className={`text-xs p-2 rounded ${theme === 'dark' ? 'bg-slate-700 text-slate-300' : 'bg-gray-100 text-gray-600'}`}>
                                        Keterangan tersimpan: "{currentDayLog.absenceReason}"
                                    </p>
                                )}
                            </form>
                        )}
                    </div>

                    <div className={`lg:col-span-1 p-6 rounded-xl shadow-lg ${theme === 'dark' ? 'bg-slate-800' : 'bg-white'}`}>
                        <h2 className="text-xl font-semibold mb-2">Ringkasan & Gaji Bulan Ini</h2>
                        <div className="mb-4 flex items-center justify-between">
                            <button onClick={() => setCurrentDateDisplay(prev => new Date(prev.getFullYear(), prev.getMonth() - 1, 1))} className={`p-2 rounded-md ${theme === 'dark' ? 'bg-slate-700 hover:bg-slate-600' : 'bg-gray-200 hover:bg-gray-300'}`}><ChevronLeft size={20}/></button>
                            <span className="font-medium text-lg">{currentDateDisplay.toLocaleString('id-ID', { month: 'long', year: 'numeric' })}</span>
                            <button onClick={() => setCurrentDateDisplay(prev => new Date(prev.getFullYear(), prev.getMonth() + 1, 1))} className={`p-2 rounded-md ${theme === 'dark' ? 'bg-slate-700 hover:bg-slate-600' : 'bg-gray-200 hover:bg-gray-300'}`}><ChevronRight size={20}/></button>
                        </div>
                        
                        <div className="grid grid-cols-7 gap-1 text-xs mb-4">
                            {['Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab'].map(d => <div key={d} className={`font-semibold text-center ${theme === 'dark' ? 'text-slate-400' : 'text-slate-500'}`}>{d}</div>)}
                            {monthDays}
                        </div>

                        {isLoadingData && <p>Memuat data gaji...</p>}
                        {!isLoadingData && employeeSalary && currentEmployeeProfile && (
                            <div className={`space-y-3 ${theme === 'dark' ? 'text-slate-300' : 'text-gray-700'}`}>
                                <p className="text-sm font-medium">Menggunakan: <span className="font-bold text-indigo-500 dark:text-indigo-400">Sistem Gaji {currentEmployeeProfile.salarySystemType || 1}</span></p>
                                { (currentEmployeeProfile.salarySystemType || 1) === 1 && (
                                    <>
                                        <div className="flex justify-between"><span>Total Hari Kerja Efektif:</span> <span className="font-semibold">{employeeSalary.workableDaysSystem1} hari</span></div>
                                        <div className="flex justify-between"><span>Total Kehadiran (termasuk Minggu pengganti):</span> <span className="font-semibold">{employeeSalary.daysPresentSystem1} hari</span></div>
                                        <hr className={`my-3 ${theme === 'dark' ? 'border-slate-700' : 'border-gray-200'}`}/>
                                        <div className="flex justify-between"><span>Gaji Pokok Diterima:</span> <span className="font-semibold text-green-500 dark:text-green-400">Rp {employeeSalary.base.toLocaleString('id-ID')}</span></div>
                                        {currentEmployeeProfile.customBaseSalarySystem1 != null && <span className="text-xs text-sky-600 dark:text-sky-400">(Kustom: Rp {parseFloat(currentEmployeeProfile.customBaseSalarySystem1).toLocaleString('id-ID')})</span>}
                                        
                                        <div className="flex justify-between"><span>Total Lembur:</span> <span className="font-semibold">{employeeSalary.totalOvertimeHours} jam {employeeSalary.totalOvertimeMinutes} menit</span></div>
                                        <div className="flex justify-between"><span>Uang Lembur Diterima:</span> <span className="font-semibold text-green-500 dark:text-green-400">Rp {employeeSalary.overtime.toLocaleString('id-ID')}</span></div>
                                        {currentEmployeeProfile.customOvertimeRateSystem1 != null && <span className="text-xs text-sky-600 dark:text-sky-400">(Kustom: Rp {parseFloat(currentEmployeeProfile.customOvertimeRateSystem1).toLocaleString('id-ID')}/jam)</span>}
                                    </>
                                )}
                                { currentEmployeeProfile.salarySystemType === 2 && (
                                    <>
                                        <div className="flex justify-between"><span>Total Hari Bekerja (Sistem 2):</span> <span className="font-semibold">{employeeSalary.daysWorkedSystem2 || 0} hari</span></div>
                                        <div className="flex justify-between"><span>Total Jam Kerja Dibayar (Sistem 2):</span> <span className="font-semibold">{formatDuration(employeeSalary.totalWorkMinutesSystem2 || 0)}</span></div>
                                        {currentEmployeeProfile.customDailyRateSystem2 != null && 
                                            <span className="text-xs text-sky-600 dark:text-sky-400">
                                                (Kustom: Rp {parseFloat(currentEmployeeProfile.customDailyRateSystem2).toLocaleString('id-ID')}/hari
                                                {currentEmployeeProfile.customTargetHoursSystem2 != null ? ` @ ${currentEmployeeProfile.customTargetHoursSystem2} jam target` : ''})
                                            </span>
                                        }
                                    </>
                                )}
                                <hr className={`my-3 ${theme === 'dark' ? 'border-slate-700' : 'border-gray-200'}`}/>
                                <div className="flex justify-between text-lg font-bold"><span>Total Estimasi Gaji:</span> <span className="text-indigo-600 dark:text-indigo-400">Rp {employeeSalary.total.toLocaleString('id-ID')}</span></div>
                            </div>
                        )}
                        {!isLoadingData && !employeeSalary && <p>Tidak ada data kerja untuk bulan ini atau sedang dihitung.</p>}
                    </div>
                </div>
            </div>
        );
    };

    const fetchWorkLogForAdminMonitor = useCallback(async (employeeId, year, month) => {
        if (!db || !employeeId || !appId) return {};
        setIsLoadingAdminMonitor(true);
        const monthString = `<span class="math-inline">\{year\}\-</span>{String(month + 1).padStart(2, '0')}`;
        const workLogCollectionRef = collection(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{employeeId}/work_records`);
        const q = query(workLogCollectionRef, where("monthYear", "==", monthString), where("userId", "==", employeeId));
        const newWorkLog = {};
        try {
            const querySnapshot = await getDocs(q);
            querySnapshot.forEach((docSnap) => {
                const data = docSnap.data();
                if ((data.entryMethod === 'multi_session_clock' || data.entryMethod === 'clock') && !Array.isArray(data.sessions)) { 
                    data.sessions = [];
                    if (data.entryMethod === 'clock' && data.clockInTimestamp) {
                        const session = { clockIn: data.clockInTimestamp, clockOut: data.clockOutTimestamp, durationMinutes: data.totalWorkDurationMinutes || 0 };
                        data.sessions.push(session);
                        data.entryMethod = 'multi_session_clock'; 
                    }
                }
                newWorkLog[data.dateStr] = { ...data, id: docSnap.id };
            });
            setAdminMonitorWorkLog(newWorkLog);
        } catch (err) {
            if (toast && typeof toast.error === 'function') toast.error("Gagal mengambil data kerja untuk monitor: " + err.message);
            setAdminMonitorWorkLog({});
        } finally {
            setIsLoadingAdminMonitor(false);
        }
        return newWorkLog; 
    }, [appId, db]); 

    useEffect(() => {
        if (isAdmin && adminSelectedEmployeeForMonitor?.id && db && activeAdminTab === 'dailyMonitor') { 
            fetchWorkLogForAdminMonitor(adminSelectedEmployeeForMonitor.id, selectedYearAdmin, selectedMonthAdmin);
        }
    }, [isAdmin, adminSelectedEmployeeForMonitor, selectedYearAdmin, selectedMonthAdmin, fetchWorkLogForAdminMonitor, db, activeAdminTab]);


    const AdminDashboard = () => {
        const handleMonthYearChange = (e) => {
            const [year, month] = e.target.value.split('-');
            setSelectedYearAdmin(parseInt(year));
            setSelectedMonthAdmin(parseInt(month) - 1);
        };
        const handleAnalyticsMonthYearChange = (e) => {
            const [year, month] = e.target.value.split('-');
            setSelectedYearAnalytics(parseInt(year));
            setSelectedMonthAnalytics(parseInt(month) - 1);
        };


        const handleSelectEmployeeForMonitor = async (employeeId) => {
            if (employeeId) {
                let selectedEmpData = adminSalaries.find(emp => emp.id === employeeId);
                let profileToSet;

                if (selectedEmpData) { 
                    profileToSet = {
                        id: selectedEmpData.id, name: selectedEmpData.name, email: selectedEmpData.email,
                        isAdmin: selectedEmpData.isAdmin, isActive: selectedEmpData.isActive,
                        salarySystemType: selectedEmpData.salarySystemType,
                        customBaseSalarySystem1: selectedEmpData.customBaseSalarySystem1,
                        customOvertimeRateSystem1: selectedEmpData.customOvertimeRateSystem1,
                        customDailyRateSystem2: selectedEmpData.customDailyRateSystem2,
                        customTargetHoursSystem2: selectedEmpData.customTargetHoursSystem2,
                    };
                } else { 
                    try {
                        const userProfileRef = doc(db, `artifacts/<span class="math-inline">\{appId\}/users/</span>{employeeId}`);
                        const userProfileSnap = await getDoc(userProfileRef);
                        if (userProfileSnap.exists()) {
                            profileToSet = { id: employeeId, ...userProfileSnap.data() };
                        } else {
                            toast.error("Profil karyawan tidak ditemukan di database.");
                            setAdminSelectedEmployeeForMonitor(null); return;
                        }
                    } catch (error) {
                        toast.error("Gagal memuat profil karyawan.");
                        setAdminSelectedEmployeeForMonitor(null); return;
                    }
                }
                setAdminSelectedEmployeeForMonitor(profileToSet);
            } else {
                setAdminSelectedEmployeeForMonitor(null);
            }
            setAdminMonitorSelectedDate(null); 
            setIsDailyDetailModalOpen(false); 
        };
        
        const handleAdminMonitorDateClick = (dateStr, logEntry) => {
            setAdminMonitorSelectedDate(dateStr);
            const dateObj = new Date(dateStr + "T00:00:00");
            if (!adminSelectedEmployeeForMonitor || !appSettings) {
                toast.error("Data karyawan atau pengaturan aplikasi belum siap.");
                return;
            }
            const employeeProfileForCalc = adminSalaries.find(emp => emp.id === adminSelectedEmployeeForMonitor.id) || adminSelectedEmployeeForMonitor;
            const dailySalaryInfo = calculateDailySalary(logEntry, employeeProfileForCalc, appSettings, dateObj);
            setDailyDetailData({
                date: dateStr,
                employeeName: adminSelectedEmployeeForMonitor?.name || 'N/A',
                salarySystemType: adminSelectedEmployeeForMonitor?.salarySystemType || 1,
                log: logEntry, 
                dailySalary: dailySalaryInfo,
            });
            setIsDailyDetailModalOpen(true);
        };

        const renderAdminMonitorCalendar = () => {
            if (!adminSelectedEmployeeForMonitor) return null;

            const year = selectedYearAdmin;
            const month = selectedMonthAdmin;
            const monthDays = [];
            const firstDayOfMonth = new Date(year, month, 1).getDay();
            const daysInSelectedMonth = getDaysInMonth(year, month);

            for (let i = 0; i < firstDayOfMonth; i++) monthDays.push(<div key={`empty-monitor-${i}`} className="p-1 sm:p-2 border border-transparent"></div>);

            for (let day = 1; day <= daysInSelectedMonth; day++) {
                const dateStr = `<span class="math-inline">\{year\}\-</span>{String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
                const logForDay = adminMonitorWorkLog[dateStr];
                let bgColor = theme === 'dark' ? 'bg-slate-700 hover:bg-slate-600' : 'bg-white hover:bg-gray-100';
                let textColor = theme === 'dark' ? 'text-slate-300' : 'text-slate-700';
                let note = null;

                if (logForDay) {
                    if (logForDay.entryMethod === 'absence_reason') {
                        bgColor = theme === 'dark' ? 'bg-yellow-700 hover:bg-yellow-600' : 'bg-yellow-200 hover:bg-yellow-300';
                        textColor = theme === 'dark' ? 'text-yellow-100' : 'text-yellow-800';
                        note = <div className="text-xs mt-0.5">Absen</div>;
                    } else if (logForDay.totalWorkDurationMinutes > 0) {
                        bgColor = theme === 'dark' ? 'bg-green-700 hover:bg-green-600' : 'bg-green-200 hover:bg-green-300';
                        textColor = theme === 'dark' ? 'text-green-100' : 'text-green-800';
                        note = <div className="text-xs mt-0.5">{formatDuration(logForDay.totalWorkDurationMinutes)}</div>;
                    } else if (logForDay.entryMethod === 'multi_session_clock' && logForDay.sessions && logForDay.sessions.some(s=>s.clockIn && !s.clockOut)) { 
                        bgColor = theme === 'dark' ? 'bg-sky-700 hover:bg-sky-600' : 'bg-sky-200 hover:bg-sky-300'; 
                        textColor = theme === 'dark' ? 'text-sky-100' : 'text-sky-800';
                        note = <div className="text-xs mt-0.5">Aktif</div>;
                    } else if (logForDay.entryMethod === 'manual' || (logForDay.entryMethod === 'multi_session_clock' && logForDay.sessions && logForDay.sessions.length > 0) ) { 
                        bgColor = theme === 'dark' ? 'bg-amber-700 hover:bg-amber-600' : 'bg-amber-200 hover:bg-amber-300';
                        textColor = theme === 'dark' ? 'text-amber-100' : 'text-amber-800';
                        note = <div className="text-xs mt-0.5">0 Jam</div>;
                    }
                } else { 
                    const currentDate = new Date(year, month, day);
                    if (currentDate.getDay() !== 0) { 
                        bgColor = theme === 'dark' ? 'bg-red-900 hover:bg-red-800' : 'bg-red-100 hover:bg-red-200';
                        textColor = theme === 'dark' ? 'text-red-200' : 'text-red-700';
                        note = <div className="text-xs mt-0.5">?</div>;
                    }
                }
                
                if (dateStr === adminMonitorSelectedDate) {
                    bgColor = theme === 'dark' ? 'ring-2 ring-indigo-400 bg-indigo-600' : 'ring-2 ring-indigo-500 bg-indigo-500';
                    textColor = 'text-white';
                }

                monthDays.push(
                    <div
                        key={`monitor-${day}`}
                        onClick={() => handleAdminMonitorDateClick(dateStr, logForDay)}
                        className={`p-1.5 sm:p-2 text-center border rounded-md cursor-pointer transition-colors ${bgColor} ${textColor} ${theme === 'dark' ? 'border-slate-600' : 'border-gray-300'}`}
                    >
                        <div className="text-sm sm:text-base">{day}</div>
                        {note}
                    </div>
                );
            }

            return (
                <div className={`mt-6 p-4 rounded-xl shadow-lg ${theme === 'dark' ? 'bg-slate-800' : 'bg-white'}`}>
                    <h3 className="text-lg font-semibold mb-3">Kalender Kehadiran: {adminSelectedEmployeeForMonitor.name}</h3>
                     <div className="grid grid-cols-7 gap-1 text-xs mb-2">
                        {['Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab'].map(d => <div key={d} className={`font-semibold text-center ${theme === 'dark' ? 'text-slate-400' : 'text-slate-500'}`}>{d}</div>)}
                    </div>
                    <div className="grid grid-cols-7 gap-1">
                        {isLoadingAdminMonitor ? <div className="col-span-7 text-center py-5">Memuat kalender...</div> : monthDays}
                    </div>
                    {adminSelectedEmployeeForMonitor && adminMonitorWorkLog && Object.keys(adminMonitorWorkLog).length > 0 && !isLoadingAdminMonitor && (
                        <div className={`mt-6 pt-4 border-t ${theme === 'dark' ? 'border-slate-700' : 'border-gray-200'}`}>
                            <h4 className="text-md font-semibold mb-2">Ringkasan Bulan {new Date(selectedYearAdmin, selectedMonthAdmin).toLocaleString('id-ID', { month: 'long' })} untuk {adminSelectedEmployeeForMonitor.name}:</h4>
                            {(() => {
                                const empSummary = adminSalaries.find(s => s.id === adminSelectedEmployeeForMonitor.id);
                                if (!empSummary) return <p className="text-sm">Data ringkasan gaji bulanan tidak ditemukan.</p>;

                                let daysAbsentWithReason = 0;
                                let daysAbsentWithoutReasonOnWorkdays = 0;
                                const effectiveWorkDaysList = getEffectiveWorkDaysArray(selectedYearAdmin, selectedMonthAdmin);

                                effectiveWorkDaysList.forEach(dateStr => {
                                    const log = adminMonitorWorkLog[dateStr];
                                    if (!log) {
                                        daysAbsentWithoutReasonOnWorkdays++;
                                    } else if (log.entryMethod === 'absence_reason') {
                                        daysAbsentWithReason++;
                                    } else if (log.totalWorkDurationMinutes === 0) {
                                        const d = new Date(dateStr + "T00:00:00");
                                        if (d.getDay() !== 0) { 
                                            daysAbsentWithoutReasonOnWorkdays++;
                                        } else { 
                                            if (empSummary.salarySystemType === 1) {
                                                let absentInWeek = false;
                                                const mondayOfThisWeek = getMonday(d);
                                                for (let i = 0; i < 6; i++) {
                                                    const checkDate = new Date(mondayOfThisWeek);
                                                    checkDate.setDate(mondayOfThisWeek.getDate() + i);
                                                    const logForCheckDate = adminMonitorWorkLog[getDateString(checkDate)];
                                                    if (!logForCheckDate || (logForCheckDate.totalWorkDurationMinutes === 0 && logForCheckDate.entryMethod !== 'absence_reason')) {
                                                        absentInWeek = true; break;
                                                    }
                                                }
                                                if(absentInWeek) daysAbsentWithoutReasonOnWorkdays++;
                                            }
                                        }
                                    }
                                });
                                
                                return (
                                    <div className="text-sm space-y-1">
                                        <p>Total Hari Hadir (Efektif): {empSummary.daysPresentSystem1 || empSummary.daysWorkedSystem2 || 0} hari</p>
                                        <p>Total Hari Tidak Masuk (Dengan Keterangan): {daysAbsentWithReason} hari</p>
                                        <p>Total Hari Tidak Masuk (Tanpa Keterangan pada Hari Kerja): {daysAbsentWithoutReasonOnWorkdays} hari</p>
                                        <p>Total Jam Lembur: {formatDuration((empSummary.totalOvertimeHours || 0) * 60 + (empSummary.totalOvertimeMinutes || 0))}</p>
                                        <hr className={`my-2 ${theme === 'dark' ? 'border-slate-700' : 'border-gray-300'}`}/>
                                        <p>Gaji Pokok Diterima: Rp {empSummary.base.toLocaleString('id-ID')} 
                                            {empSummary.customBaseSalarySystem1 != null && <span className="text-xs text-sky-500"> (Kustom)</span>}
                                        </p>
                                        <p>Uang Lembur Diterima: Rp {empSummary.overtime.toLocaleString('id-ID')}
                                            {empSummary.customOvertimeRateSystem1 != null && <span className="text-xs text-sky-500"> (Kustom)</span>}
                                        </p>
                                        <p className="font-semibold">Total Gaji Bulan Ini: Rp {empSummary.total.toLocaleString('id-ID')}</p>
                                    </div>
                                );
                            })()}
                        </div>
                    )}
                </div>
            );
        };


        return (
            <div className={`container mx-auto p-4 md:p-6 ${theme === 'dark' ? 'bg-slate-900 text-slate-200' : 'bg-gray-100 text-slate-800'} min-h-screen transition-colors duration-300`}>
                <header className="mb-6 flex flex-col sm:flex-row justify-between items-center">
                     <div className="flex items-center gap-3">
                        <Users size={32} className="text-indigo-500" />
                        <h1 className="text-2xl sm:text-3xl font-bold">Dasbor Admin Akad Kita</h1>
                    </div>
                   <div className="flex items-center gap-2 sm:gap-4 mt-4 sm:mt-0">
                        <button onClick={() => setIsBackupRestoreModalOpen(true)} className={`flex items-center gap-2 p-2 rounded-lg ${theme === 'dark' ? 'bg-slate-700 hover:bg-slate-600' : 'bg-white hover:bg-gray-200'} shadow-md`} title="Backup & Restore Data">
                            <DatabaseBackup size={20} /> <span className="hidden md:inline">Backup/Restore</span>
                        </button>
                        <button onClick={() => setIsAppSettingsModalOpen(true)} className={`flex items-center gap-2 p-2 rounded-lg ${theme === 'dark' ? 'bg-slate-700 hover:bg-slate-600' : 'bg-white hover:bg-gray-200'} shadow-md`} title="Pengaturan Aplikasi">
                            <Settings size={20} /> <span className="hidden md:inline">Pengaturan</span>
                        </button>
                        <button onClick={toggleTheme} className={`p-2 rounded-full ${theme === 'dark' ? 'bg-slate-700 text-yellow-400 hover:bg-slate-600' : 'bg-white text-indigo-600 hover:bg-gray-200'} shadow-md`}>
                            {theme === 'light' ? <Moon size={20} /> : <Sun size={20} />}
                        </button>
                        <button
                            onClick={handleLogout}
                            className={`flex items-center gap-2 ${theme === 'dark' ? 'bg-red-600 hover:bg-red-700' : 'bg-red-500 hover:bg-red-600'} text-white font-semibold py-2 px-4 rounded-lg shadow transition duration-150`}
                        >
                           <LogOut size={18}/> <span className="hidden sm:inline">Logout</span>
                        </button>
                    </div>
                </header>
                 {currentUser && <p className="mb-6 text-lg">Login sebagai Admin: <span className="font-semibold">{ userName || currentUser.email}</span>!</p>}
                
                <div className={`mb-6 flex space-x-1 rounded-lg p-1 ${theme === 'dark' ? 'bg-slate-700' : 'bg-indigo-100'}`}>
                    {['salaryReport', 'dailyMonitor', 'analytics', 'activityLog'].map((tab) => (
                        <button
                            key={tab}
                            onClick={() => setActiveAdminTab(tab)}
                            className={`w-full rounded-md py-2 px-3 text-sm font-medium transition-colors
                                ${activeAdminTab === tab 
                                    ? (theme === 'dark' ? 'bg-indigo-600 text-white' : 'bg-indigo-500 text-white shadow-md') 
                                    : (theme === 'dark' ? 'text-slate-300 hover:bg-slate-600' : 'text-indigo-600 hover:bg-indigo-200')}
                            `}
                        >
                            {tab === 'salaryReport' && 'Laporan Gaji Bulanan'}
                            {tab === 'dailyMonitor' && 'Monitor Harian'}
                            {tab === 'analytics' && 'Analitik Kehadiran'}
                            {tab === 'activityLog' && 'Log Aktivitas Admin'}
                        </button>
                    ))}
                </div>
                
                {(activeAdminTab === 'salaryReport' || activeAdminTab === 'dailyMonitor') && (
                    <div className={`mb-6 p-4 rounded-xl shadow-lg ${theme === 'dark' ? 'bg-slate-800' : 'bg-white'} flex flex-col sm:flex-row justify-between items-center gap-4`}>
                        <div>
                            <label htmlFor="monthYearAdmin" className="block text-sm font-medium mb-1">Pilih Periode (Bulan & Tahun):</label>
                            <input
                                type="month" id="monthYearAdmin"
                                value={`<span class="math-inline">\{selectedYearAdmin\}\-</span>{String(selectedMonthAdmin + 1).padStart(2, '0')}`}
                                onChange={handleMonthYearChange}
                                className={`mt-1 block w-full sm:w-auto px-3 py-2 border ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'} rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm`}
                            />
                        </div>
                        {activeAdminTab === 'salaryReport' && ( 
                            <button 
                                onClick={() => exportToCSV(adminSalaries, `LaporanGaji-<span class="math-inline">\{selectedYearAdmin\}\-</span>{selectedMonthAdmin+1}.csv`)}
                                className={`flex items-center gap-2 mt-3 sm:mt-0 px-4 py-2 rounded-lg text-sm font-medium text-white ${theme === 'dark' ? 'bg-teal-600 hover:bg-teal-700' : 'bg-teal-500 hover:bg-teal-600'} transition duration-150`}
                                disabled={adminSalaries.length === 0 || isLoadingData}
                            >
                                <Download size={18}/> Ekspor CSV
                            </button>
                        )}
                    </div>
                )}


                {activeAdminTab === 'salaryReport' && (
                    <div className={`overflow-x-auto rounded-xl shadow-lg ${theme === 'dark' ? 'bg-slate-800' : 'bg-white'}`}>
                        <table className="min-w-full divide-y divide-slate-200 dark:divide-slate-700">
                            <thead className={`${theme === 'dark' ? 'bg-slate-700' : 'bg-gray-50'}`}>
                                <tr>
                                    <th className="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Nama</th>
                                    <th className="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Status & Sistem Gaji</th>
                                    <th className="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Kehadiran/Efektif (S1)</th>
                                    <th className="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Gaji Pokok (S1)</th>
                                    <th className="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Lembur (S1)</th>
                                    <th className="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Total Jam (S2)</th>
                                    <th className="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Total Gaji</th>
                                    <th className="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Aksi</th>
                                </tr>
                            </thead>
                            <tbody className={`divide-y ${theme === 'dark' ? 'bg-slate-800 divide-slate-700' : 'bg-white divide-gray-200'}`}>
                                {isLoadingData && <tr><td colSpan="8" className="px-6 py-10 text-center text-sm">Memuat data...</td></tr>}
                                {!isLoadingData && adminSalaries.length === 0 && <tr><td colSpan="8" className="px-6 py-10 text-center text-sm">Tidak ada data karyawan untuk periode ini.</td></tr>}
                                {adminSalaries.map(emp => (
                                    <tr key={emp.id} className={`${theme === 'dark' ? 'hover:bg-slate-700' : 'hover:bg-gray-50'} transition-colors`}>
                                        <td className="px-4 py-3 whitespace-nowrap">
                                            <div className="text-sm font-medium">{emp.name}</div>
                                            <div className={`text-xs ${theme === 'dark' ? 'text-slate-400' : 'text-slate-500'}`}>{emp.email}</div>
                                        </td>
                                        <td className="px-4 py-3 whitespace-nowrap text-sm">
                                            <span className={`block mb-1 px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${emp.isActive ? (theme === 'dark' ? 'bg-green-800 text-green-300' : 'bg-green-100 text-green-800') : (theme === 'dark' ? 'bg-red-800 text-red-300' : 'bg-red-100 text-red-800')}`}>
                                                {emp.isActive ? 'Aktif' : 'Nonaktif'}
                                            </span>
                                            {emp.isAdmin && <span className={`block mb-1 px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${theme === 'dark' ? 'bg-sky-800 text-sky-300' : 'bg-sky-100 text-sky-800'}`}>Admin</span>}
                                            <span className={`block px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${theme === 'dark' ? 'bg-purple-800 text-purple-300' : 'bg-purple-100 text-purple-800'}`}>
                                                Sistem {emp.salarySystemType || 1}
                                            </span>
                                        </td>
                                        <td className="px-4 py-3 whitespace-nowrap text-sm">
                                            {(emp.salarySystemType || 1) === 1 ? `${emp.daysPresentSystem1 || 0} / ${emp.workableDaysSystem1 || 0}` : 'N/A'}
                                        </td>
                                        <td className="px-4 py-3 whitespace-nowrap text-sm">
                                            {(emp.salarySystemType || 1) === 1 ? `Rp ${emp.base.toLocaleString('id-ID')}` : 'N/A'}
                                            {emp.customBaseSalarySystem1 != null && <span className="block text-xs text-sky-500">(Kustom)</span>}
                                        </td>
                                        <td className="px-4 py-3 whitespace-nowrap text-sm">
                                            {(emp.salarySystemType || 1) === 1 ? `${emp.totalOvertimeHours || 0}j ${emp.totalOvertimeMinutes || 0}m (Rp ${emp.overtime.toLocaleString('id-ID')})` : 'N/A'}
                                            {emp.customOvertimeRateSystem1 != null && <span className="block text-xs text-sky-500">(Kustom)</span>}
                                        </td>
                                        <td className="px-4 py-3 whitespace-nowrap text-sm">
                                            {emp.salarySystemType === 2 ? formatDuration(emp.totalWorkMinutesSystem2 || 0) : 'N/A'}
                                            {emp.customDailyRateSystem2 != null && <span className="block text-xs text-sky-500">(Kustom)</span>}
                                        </td>
                                        <td className="px-4 py-3 whitespace-nowrap text-sm font-semibold text-indigo-500 dark:text-indigo-400">Rp {emp.total.toLocaleString('id-ID')}</td>
                                        <td className="px-4 py-3 whitespace-nowrap text-sm space-x-2">
                                            <button onClick={() => handleOpenAdminEditModal(emp)} className={`p-1.5 rounded-md ${theme === 'dark' ? 'hover:bg-slate-600 text-sky-400' : 'hover:bg-gray-200 text-sky-600'}`} title="Edit Catatan Kerja"><Edit3 size={16}/></button>
                                            <button onClick={() => openUserSettingsModal(emp.id)} className={`p-1.5 rounded-md ${theme === 'dark' ? 'hover:bg-slate-600 text-amber-400' : 'hover:bg-gray-200 text-amber-600'}`} title="Pengaturan Pengguna"><UserCog size={16}/></button>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                )}

                {activeAdminTab === 'dailyMonitor' && (
                    <div className={`p-4 rounded-xl shadow-lg ${theme === 'dark' ? 'bg-slate-800' : 'bg-white'}`}>
                        <h2 className="text-xl font-semibold mb-4 flex items-center gap-2"><ListFilter size={22}/> Monitor Kehadiran & Gaji Harian Karyawan</h2>
                        <div className="mb-4">
                            <label htmlFor="adminMonitorEmployee" className="block text-sm font-medium mb-1">Pilih Karyawan:</label>
                            <select 
                                id="adminMonitorEmployee"
                                value={adminSelectedEmployeeForMonitor?.id || ''}
                                onChange={(e) => handleSelectEmployeeForMonitor(e.target.value)}
                                className={`w-full sm:w-1/2 lg:w-1/3 mt-1 block px-3 py-2 border ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'} rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm`}
                            >
                                <option value="">-- Pilih Karyawan --</option>
                                {adminSalaries.filter(emp => emp.isActive).map(emp => ( 
                                    <option key={emp.id} value={emp.id}>{emp.name} ({emp.email})</option>
                                ))}
                            </select>
                        </div>
                        {adminSelectedEmployeeForMonitor && renderAdminMonitorCalendar()}
                        {!adminSelectedEmployeeForMonitor && <p className={`text-sm ${theme === 'dark' ? 'text-slate-400' : 'text-slate-600'}`}>Pilih karyawan dan periode untuk melihat kalender kehadiran dan detail gaji harian.</p>}
                    </div>
                )}

                {activeAdminTab === 'analytics' && (
                    <div className={`p-4 rounded-xl shadow-lg ${theme === 'dark' ? 'bg-slate-800' : 'bg-white'}`}>
                        <h2 className="text-xl font-semibold mb-4 flex items-center gap-2"><BarChart3 size={22}/> Analitik Kehadiran Bulanan</h2>
                        <div className="mb-4">
                            <label htmlFor="monthYearAnalytics" className="block text-sm font-medium mb-1">Pilih Bulan dan Tahun:</label>
                            <input
                                type="month" id="monthYearAnalytics"
                                value={`<span class="math-inline">\{selectedYearAnalytics\}\-</span>{String(selectedMonthAnalytics + 1).padStart(2, '0')}`}
                                onChange={handleAnalyticsMonthYearChange}
                                className={`mt-1 block w-full sm:w-auto px-3 py-2 border ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'} rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm`}
                            />
                        </div>
                        {isLoadingAnalytics && <p>Memuat data analitik...</p>}
                        {!isLoadingAnalytics && attendanceAnalyticsData.length > 0 && (
                            <div className="overflow-x-auto">
                                <table className="min-w-full divide-y divide-slate-200 dark:divide-slate-700">
                                    <thead className={`${theme === 'dark' ? 'bg-slate-700' : 'bg-gray-50'}`}>
                                        <tr>
                                            <th className="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Nama Karyawan</th>
                                            <th className="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Total Hadir</th>
                                            <th className="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Absen (Ket.)</th>
                                            <th className="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Absen (Tanpa Ket.)</th>
                                            <th className="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider">Total Lembur</th>
                                        </tr>
                                    </thead>
                                    <tbody className={`divide-y ${theme === 'dark' ? 'bg-slate-800 divide-slate-700' : 'bg-white divide-gray-200'}`}>
                                        {attendanceAnalyticsData.map(data => (
                                            <tr key={data.id}>
                                                <td className="px-4 py-3 whitespace-nowrap text-sm">{data.name}</td>
                                                <td className="px-4 py-3 whitespace-nowrap text-sm">{data.daysPresent} hari</td>
                                                <td className="px-4 py-3 whitespace-nowrap text-sm">{data.daysAbsentWithReason} hari</td>
                                                <td className="px-4 py-3 whitespace-nowrap text-sm">{data.daysAbsentWithoutReason} hari</td>
                                                <td className="px-4 py-3 whitespace-nowrap text-sm">{formatDuration(data.totalOvertimeHours * 60 + data.totalOvertimeMinutes)}</td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        )}
                         {!isLoadingAnalytics && attendanceAnalyticsData.length === 0 && <p className="text-sm">Tidak ada data analitik untuk periode ini.</p>}
                    </div>
                )}

                {activeAdminTab === 'activityLog' && (
                    <div className={`p-4 rounded-xl shadow-lg ${theme === 'dark' ? 'bg-slate-800' : 'bg-white'}`}>
                        <h2 className="text-xl font-semibold mb-4 flex items-center gap-2"><Activity size={22}/> Log Aktivitas Admin</h2>
                        <button 
                            onClick={() => fetchAdminActivityLogs()} 
                            disabled={isLoadingAdminLogs}
                            className={`mb-4 px-4 py-2 rounded-lg text-sm font-medium text-white ${theme === 'dark' ? 'bg-sky-600 hover:bg-sky-700' : 'bg-sky-500 hover:bg-sky-600'} transition duration-150 disabled:opacity-60`}
                        >
                            Refresh Log
                        </button>
                        {isLoadingAdminLogs && adminActivityLogs.length === 0 && <p>Memuat log aktivitas...</p>}
                        {!isLoadingAdminLogs && adminActivityLogs.length === 0 && <p className="text-sm">Tidak ada aktivitas admin tercatat.</p>}
                        {adminActivityLogs.length > 0 && (
                            <div className="space-y-3 max-h-[70vh] overflow-y-auto">
                                {adminActivityLogs.map(log => (
                                    <div key={log.id} className={`p-3 rounded-md border text-xs ${theme === 'dark' ? 'bg-slate-700 border-slate-600' : 'bg-gray-50 border-gray-200'}`}>
                                        <p><strong>Waktu:</strong> {log.timestamp ? new Date(log.timestamp.seconds * 1000).toLocaleString('id-ID') : 'N/A'}</p>
                                        <p><strong>Admin:</strong> {log.adminName} ({log.adminUserId.substring(0,6)}...)</p>
                                        <p><strong>Aksi:</strong> <span className="font-semibold">{log.actionType.replace(/_/g, ' ')}</span></p>
                                        {log.targetUserName && <p><strong>Target:</strong> {log.targetUserName} ({log.targetUserId?.substring(0,6)}...)</p>}
                                        {log.details && Object.keys(log.details).length > 0 && (
                                            <details className="mt-1">
                                                <summary className="cursor-pointer text-indigo-500 dark:text-indigo-400">Detail</summary>
                                                <pre className={`mt-1 p-2 rounded text-xs overflow-x-auto ${theme === 'dark' ? 'bg-slate-600' : 'bg-gray-100'}`}>
                                                    {JSON.stringify(log.details, null, 2)}
                                                </pre>
                                            </details>
                                        )}
                                    </div>
                                ))}
                                {hasMoreLogs && !isLoadingAdminLogs && (
                                    <button 
                                        onClick={() => fetchAdminActivityLogs(true)}
                                        className={`w-full mt-4 px-4 py-2 rounded-lg text-sm font-medium border ${theme === 'dark' ? 'border-slate-600 hover:bg-slate-700' : 'border-gray-300 hover:bg-gray-100'}`}
                                    >
                                        Muat Lebih Banyak
                                    </button>
                                )}
                            </div>
                        )}
                    </div>
                )}


                 <footer className={`text-center text-sm ${theme === 'dark' ? 'text-slate-500' : 'text-slate-600'} mt-12`}>
                    Aplikasi Gaji Karyawan Akad Kita &copy; 2025
                </footer>
            </div>
        );
    };


    // ----- RENDER UTAMA -----
    if (!isAuthReady || (page === 'loading' && !auth?.currentUser)) { 
        return (
            <div className={`flex items-center justify-center min-h-screen ${theme === 'dark' ? 'bg-slate-900' : 'bg-gray-100'}`}>
                <div className={`text-xl font-semibold ${theme === 'dark' ? 'text-white' : 'text-slate-700'}`}>Memuat Aplikasi...</div>
            </div>
        );
    }
    
    if (page === 'error') {
        return (
             <div className={`flex items-center justify-center min-h-screen ${theme === 'dark' ? 'bg-red-900' : 'bg-red-100'}`}>
                <div className={`p-8 ${theme === 'dark' ? 'bg-slate-800 text-white' : 'bg-white text-slate-700'} shadow-md rounded-lg text-center`}>
                    <h1 className="text-2xl font-bold text-red-500 mb-4 flex items-center justify-center gap-2"><AlertTriangle/>Terjadi Kesalahan</h1>
                    <p>{ "Firebase tidak dapat diinisialisasi atau terjadi kesalahan."}</p>
                </div>
            </div>
        );
    }

    return (
        <>
            <ToastContainer 
                position="bottom-right" autoClose={4000} hideProgressBar={false}
                newestOnTop={false} closeOnClick rtl={false}
                pauseOnFocusLoss draggable pauseOnHover theme={theme}
            />
            {page === 'login' && renderAuthForm(true)}
            {page === 'register' && renderAuthForm(false)}
            {page === 'employee' && <EmployeeDashboard />}
            {page === 'admin' && <AdminDashboard />}

            {isAdmin && isAppSettingsModalOpen && (
                <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center p-4 z-50">
                    <div className={`p-6 rounded-xl shadow-2xl w-full max-w-lg ${theme === 'dark' ? 'bg-slate-800 text-slate-200' : 'bg-white text-slate-800'}`}>
                        <div className="flex justify-between items-center mb-6">
                            <h3 className="text-xl font-semibold flex items-center gap-2"><Settings size={22}/> Pengaturan Aplikasi Global</h3>
                            <button onClick={() => setIsAppSettingsModalOpen(false)} className={`p-1 rounded-full ${theme === 'dark' ? 'hover:bg-slate-700' : 'hover:bg-gray-200'}`}><X size={20}/></button>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <fieldset className={`border p-4 rounded-md ${theme === 'dark' ? 'border-slate-600' : 'border-gray-300'}`}>
                                <legend className="text-sm font-medium px-1">Sistem Gaji 1 (Bulanan - Global)</legend>
                                <div className="space-y-3 mt-2">
                                    <div>
                                        <label className="block text-xs font-medium mb-1">Gaji Pokok Bulanan (Rp)</label>
                                        <input type="number" value={tempAppSettings.baseSalary} onChange={(e) => setTempAppSettings({...tempAppSettings, baseSalary: e.target.value})}
                                        className={`w-full px-3 py-2 border rounded-md text-sm ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}/>
                                    </div>
                                    <div>
                                        <label className="block text-xs font-medium mb-1">Tarif Lembur per Jam (Rp)</label>
                                        <input type="number" value={tempAppSettings.overtimeRate} onChange={(e) => setTempAppSettings({...tempAppSettings, overtimeRate: e.target.value})}
                                        className={`w-full px-3 py-2 border rounded-md text-sm ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}/>
                                    </div>
                                    <div>
                                        <label className="block text-xs font-medium mb-1">Jam Kerja Normal per Hari</label>
                                        <input type="number" value={tempAppSettings.fullWorkdayHours} onChange={(e) => setTempAppSettings({...tempAppSettings, fullWorkdayHours: e.target.value})}
                                        className={`w-full px-3 py-2 border rounded-md text-sm ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}/>
                                    </div>
                                </div>
                            </fieldset>
                            <fieldset className={`border p-4 rounded-md ${theme === 'dark' ? 'border-slate-600' : 'border-gray-300'}`}>
                                <legend className="text-sm font-medium px-1">Sistem Gaji 2 (Harian - Global)</legend>
                                 <div className="space-y-3 mt-2">
                                    <div>
                                        <label className="block text-xs font-medium mb-1">Tarif Harian (Rp)</label>
                                        <input type="number" value={tempAppSettings.dailyRateSystem2} onChange={(e) => setTempAppSettings({...tempAppSettings, dailyRateSystem2: e.target.value})}
                                        className={`w-full px-3 py-2 border rounded-md text-sm ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}/>
                                    </div>
                                    <div>
                                        <label className="block text-xs font-medium mb-1">Target Jam per Hari</label>
                                        <input type="number" value={tempAppSettings.targetHoursSystem2} onChange={(e) => setTempAppSettings({...tempAppSettings, targetHoursSystem2: e.target.value})}
                                        className={`w-full px-3 py-2 border rounded-md text-sm ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}/>
                                    </div>
                                </div>
                            </fieldset>
                        </div>
                        <div className="mt-6 flex justify-end gap-3">
                            <button onClick={() => setIsAppSettingsModalOpen(false)} className={`px-4 py-2 rounded-lg text-sm font-medium border ${theme === 'dark' ? 'border-slate-600 hover:bg-slate-700' : 'border-gray-300 hover:bg-gray-100'}`}>Batal</button>
                            <button onClick={handleSaveAppSettings} className="px-4 py-2 rounded-lg text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 flex items-center gap-2"><Save size={16}/> Simpan Pengaturan Global</button>
                        </div>
                    </div>
                </div>
            )}

            {isAdmin && isUserSettingsModalOpen && editingUserSettings && (
                <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center p-4 z-50">
                    <div className={`p-6 rounded-xl shadow-2xl w-full max-w-lg ${theme === 'dark' ? 'bg-slate-800 text-slate-200' : 'bg-white text-slate-800'}`}>
                        <div className="flex justify-between items-center mb-6">
                            <h3 className="text-xl font-semibold flex items-center gap-2"><UserCog size={22}/> Edit Pengguna: {editingUserSettings.name}</h3>
                            <button onClick={() => setIsUserSettingsModalOpen(false)} className={`p-1 rounded-full ${theme === 'dark' ? 'hover:bg-slate-700' : 'hover:bg-gray-200'}`}><X size={20}/></button>
                        </div>
                        <div className="space-y-4 max-h-[70vh] overflow-y-auto pr-2">
                            <div>
                                <label className="block text-sm font-medium mb-1">Nama</label>
                                <input type="text" value={editingUserSettings.name} onChange={(e) => setEditingUserSettings({...editingUserSettings, name: e.target.value})}
                                 className={`w-full px-3 py-2 border rounded-md ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}/>
                            </div>
                             <div>
                                <label className="block text-sm font-medium mb-1">Email (Read-only)</label>
                                <input type="email" value={editingUserSettings.email} readOnly
                                 className={`w-full px-3 py-2 border rounded-md ${theme === 'dark' ? 'bg-slate-700 border-slate-600 opacity-70 text-slate-400' : 'border-gray-300 bg-gray-100 opacity-70 text-gray-500'}`}/>
                            </div>
                            <div>
                                <label className="block text-sm font-medium mb-1">Sistem Gaji</label>
                                <select 
                                    value={editingUserSettings.salarySystemType || 1} 
                                    onChange={(e) => setEditingUserSettings({...editingUserSettings, salarySystemType: parseInt(e.target.value)})}
                                    className={`w-full px-3 py-2 border rounded-md ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}
                                >
                                    <option value={1}>Sistem 1: Gaji Pokok Bulanan</option>
                                    <option value={2}>Sistem 2: Tarif Harian Tetap</option>
                                </select>
                            </div>

                            <fieldset className={`border p-4 rounded-md ${theme === 'dark' ? 'border-slate-600' : 'border-gray-300'}`}>
                                <legend className="text-sm font-medium px-1 flex items-center gap-1"><DollarSign size={16} className="text-green-500"/> Pengaturan Gaji Kustom</legend>
                                <p className={`text-xs mb-3 ${theme === 'dark' ? 'text-slate-400' : 'text-slate-500'}`}>Kosongkan untuk menggunakan pengaturan global.</p>
                                
                                {(editingUserSettings.salarySystemType || 1) === 1 && (
                                    <>
                                        <div className="mb-3">
                                            <label className="block text-xs font-medium mb-0.5">Gaji Pokok Kustom S1 (Rp)</label>
                                            <input type="number" placeholder="Global" value={editingUserSettings.customBaseSalarySystem1 ?? ''} 
                                                onChange={(e) => setEditingUserSettings({...editingUserSettings, customBaseSalarySystem1: e.target.value === '' ? null : e.target.value})}
                                                className={`w-full px-3 py-1.5 border rounded-md text-sm ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}/>
                                        </div>
                                        <div>
                                            <label className="block text-xs font-medium mb-0.5">Tarif Lembur Kustom S1 (Rp/jam)</label>
                                            <input type="number" placeholder="Global" value={editingUserSettings.customOvertimeRateSystem1 ?? ''} 
                                                onChange={(e) => setEditingUserSettings({...editingUserSettings, customOvertimeRateSystem1: e.target.value === '' ? null : e.target.value})}
                                                className={`w-full px-3 py-1.5 border rounded-md text-sm ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}/>
                                        </div>
                                    </>
                                )}
                                {editingUserSettings.salarySystemType === 2 && (
                                    <>
                                        <div className="mb-3">
                                            <label className="block text-xs font-medium mb-0.5">Tarif Harian Kustom S2 (Rp)</label>
                                            <input type="number" placeholder="Global" value={editingUserSettings.customDailyRateSystem2 ?? ''} 
                                                onChange={(e) => setEditingUserSettings({...editingUserSettings, customDailyRateSystem2: e.target.value === '' ? null : e.target.value})}
                                                className={`w-full px-3 py-1.5 border rounded-md text-sm ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}/>
                                        </div>
                                        <div>
                                            <label className="block text-xs font-medium mb-0.5">Target Jam Kustom S2</label>
                                            <input type="number" placeholder="Global" value={editingUserSettings.customTargetHoursSystem2 ?? ''} 
                                                onChange={(e) => setEditingUserSettings({...editingUserSettings, customTargetHoursSystem2: e.target.value === '' ? null : e.target.value})}
                                                className={`w-full px-3 py-1.5 border rounded-md text-sm ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}/>
                                        </div>
                                    </>
                                )}
                            </fieldset>


                            <div className="flex items-center pt-2">
                                <input id="isAdminUser" type="checkbox" checked={editingUserSettings.isAdmin || false} onChange={(e) => setEditingUserSettings({...editingUserSettings, isAdmin: e.target.checked})}
                                 className="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500 dark:bg-slate-700 dark:border-slate-600 dark:focus:ring-offset-slate-800"/>
                                <label htmlFor="isAdminUser" className="ml-2 block text-sm">Jadikan Admin</label>
                            </div>
                             <div className="flex items-center">
                                <input id="isActiveUser" type="checkbox" checked={editingUserSettings.isActive === undefined ? true : editingUserSettings.isActive} onChange={(e) => setEditingUserSettings({...editingUserSettings, isActive: e.target.checked})}
                                 className="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500 dark:bg-slate-700 dark:border-slate-600 dark:focus:ring-offset-slate-800"/>
                                <label htmlFor="isActiveUser" className="ml-2 block text-sm">Akun Aktif</label>
                            </div>
                             <button 
                                onClick={() => handleAdminSendPasswordReset(editingUserSettings.email)}
                                className={`w-full mt-2 flex items-center justify-center gap-2 px-4 py-2 rounded-lg text-sm font-medium border ${theme === 'dark' ? 'border-sky-600 text-sky-400 hover:bg-sky-700' : 'border-sky-500 text-sky-600 hover:bg-sky-100' }`}
                            >
                                <KeyRound size={16}/> Kirim Email Reset Password
                            </button>
                             <button 
                                onClick={() => handleAdminDeactivateAndDeleteData(editingUserSettings.id, editingUserSettings.name)}
                                className={`w-full mt-2 flex items-center justify-center gap-2 px-4 py-2 rounded-lg text-sm font-medium text-white ${theme === 'dark' ? 'bg-red-700 hover:bg-red-800' : 'bg-red-600 hover:bg-red-700' }`}
                            >
                                <UserX size={16}/> Nonaktifkan & Hapus Data Karyawan
                            </button>
                        </div>
                        <div className="mt-6 flex justify-end gap-3">
                            <button onClick={() => setIsUserSettingsModalOpen(false)} className={`px-4 py-2 rounded-lg text-sm font-medium border ${theme === 'dark' ? 'border-slate-600 hover:bg-slate-700' : 'border-gray-300 hover:bg-gray-100'}`}>Batal</button>
                            <button onClick={handleSaveUserSettings} className="px-4 py-2 rounded-lg text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 flex items-center gap-2"><Save size={16}/> Simpan</button>
                        </div>
                    </div>
                </div>
            )}
            
            {isProfileModalOpen && (
                <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center p-4 z-50">
                    <div className={`p-6 rounded-xl shadow-2xl w-full max-w-md ${theme === 'dark' ? 'bg-slate-800 text-slate-200' : 'bg-white text-slate-800'}`}>
                        <div className="flex justify-between items-center mb-6">
                            <h3 className="text-xl font-semibold flex items-center gap-2"><UserCog size={22}/> Pengaturan Profil</h3>
                            <button onClick={() => setIsProfileModalOpen(false)} className={`p-1 rounded-full ${theme === 'dark' ? 'hover:bg-slate-700' : 'hover:bg-gray-200'}`}><X size={20}/></button>
                        </div>
                        <div className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium mb-1">Nama</label>
                                <input type="text" value={profileName} onChange={(e) => setProfileName(e.target.value)}
                                    className={`w-full px-3 py-2 border rounded-md ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}/>
                            </div>
                            <div>
                                <label className="block text-sm font-medium mb-1">Email (Read-only)</label>
                                <input type="email" value={currentUser?.email || ''} readOnly
                                    className={`w-full px-3 py-2 border rounded-md ${theme === 'dark' ? 'bg-slate-700 border-slate-600 opacity-70 text-slate-400' : 'border-gray-300 bg-gray-100 opacity-70 text-gray-500'}`}/>
                            </div>
                            <button 
                                onClick={() => {
                                    setIsProfileModalOpen(false);
                                    setIsChangePasswordModalOpen(true);
                                }}
                                className={`w-full mt-2 flex items-center justify-center gap-2 px-4 py-2 rounded-lg text-sm font-medium border ${theme === 'dark' ? 'border-sky-600 text-sky-400 hover:bg-sky-700' : 'border-sky-500 text-sky-600 hover:bg-sky-100' }`}
                            >
                                <KeyRound size={16}/> Ubah Password
                            </button>
                        </div>
                         <div className="mt-6 flex justify-end gap-3">
                            <button onClick={() => setIsProfileModalOpen(false)} className={`px-4 py-2 rounded-lg text-sm font-medium border ${theme === 'dark' ? 'border-slate-600 hover:bg-slate-700' : 'border-gray-300 hover:bg-gray-100'}`}>Batal</button>
                            <button onClick={handleProfileUpdate} className="px-4 py-2 rounded-lg text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 flex items-center gap-2"><Save size={16}/> Simpan Nama</button>
                        </div>
                    </div>
                </div>
            )}
            
            {isChangePasswordModalOpen && (
                 <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center p-4 z-[60]">
                    <div className={`p-6 rounded-xl shadow-2xl w-full max-w-md ${theme === 'dark' ? 'bg-slate-800 text-slate-200' : 'bg-white text-slate-800'}`}>
                         <div className="flex justify-between items-center mb-6">
                            <h3 className="text-xl font-semibold flex items-center gap-2"><KeyRound size={22}/> Ubah Password</h3>
                            <button onClick={() => setIsChangePasswordModalOpen(false)} className={`p-1 rounded-full ${theme === 'dark' ? 'hover:bg-slate-700' : 'hover:bg-gray-200'}`}><X size={20}/></button>
                        </div>
                        <form onSubmit={handleChangePassword} className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium mb-1">Password Saat Ini</label>
                                <input type="password" value={currentPassword} onChange={(e) => setCurrentPassword(e.target.value)} required
                                    className={`w-full px-3 py-2 border rounded-md ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}/>
                            </div>
                            <div>
                                <label className="block text-sm font-medium mb-1">Password Baru</label>
                                <input type="password" value={newPassword} onChange={(e) => setNewPassword(e.target.value)} required
                                    className={`w-full px-3 py-2 border rounded-md ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}/>
                            </div>
                            <div>
                                <label className="block text-sm font-medium mb-1">Konfirmasi Password Baru</label>
                                <input type="password" value={confirmNewPassword} onChange={(e) => setConfirmNewPassword(e.target.value)} required
                                    className={`w-full px-3 py-2 border rounded-md ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}/>
                            </div>
                             <div className="mt-6 flex justify-end gap-3">
                                <button type="button" onClick={() => setIsChangePasswordModalOpen(false)} className={`px-4 py-2 rounded-lg text-sm font-medium border ${theme === 'dark' ? 'border-slate-600 hover:bg-slate-700' : 'border-gray-300 hover:bg-gray-100'}`}>Batal</button>
                                <button type="submit" className="px-4 py-2 rounded-lg text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 flex items-center gap-2"><Save size={16}/> Simpan Password</button>
                            </div>
                        </form>
                    </div>
                 </div>
            )}

            {isEditModalOpen && editingEmployee && (
                <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center p-4 z-50">
                    <div className={`p-6 rounded-xl shadow-2xl w-full max-w-2xl ${theme === 'dark' ? 'bg-slate-800 text-slate-200' : 'bg-white text-slate-800'}`}>
                        <div className="flex justify-between items-center mb-4">
                            <h3 className="text-xl font-semibold flex items-center gap-2"><FileText size={22}/> Edit Catatan: {editingEmployee.name}</h3>
                            <button onClick={() => setIsEditModalOpen(false)} className={`p-1 rounded-full ${theme === 'dark' ? 'hover:bg-slate-700' : 'hover:bg-gray-200'}`}><X size={20}/></button>
                        </div>
                        <p className="text-sm mb-1">Bulan: {new Date(selectedYearAdmin, selectedMonthAdmin).toLocaleString('id-ID', { month: 'long', year: 'numeric' })}</p>
                        <p className="text-xs mb-4">{editingEmployee.email}</p>
                        
                        <div className="max-h-[60vh] overflow-y-auto space-y-3 pr-2">
                            {[...Array(getDaysInMonth(selectedYearAdmin, selectedMonthAdmin))].map((_, dayIndex) => {
                                const day = dayIndex + 1;
                                const dateKey = `${selectedYearAdmin}-${String(selectedMonthAdmin + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
                                const logEntry = editingWorkLogsModal[dateKey] || { totalWorkDurationMinutes: 0, id: null, absenceReason: '', entryMethod: '', sessions: [] }; 
                                const originalLogEntry = editingEmployee.workLogsForMonth ? editingEmployee.workLogsForMonth[dateKey] : null; 

                                return (
                                    <div key={dateKey} className={`p-3 rounded-md border ${theme === 'dark' ? 'border-slate-700 bg-slate-750' : 'border-gray-200 bg-gray-50'}`}>
                                        <p className="font-medium mb-1">{dateKey} 
                                        {originalLogEntry?.entryMethod === 'multi_session_clock' && <span className="text-xs ml-2 text-blue-500">(Multi-Sesi)</span>}
                                        {originalLogEntry?.entryMethod === 'clock' && originalLogEntry?.sessions?.length === 0 && <span className="text-xs ml-2 text-sky-500">(Clock Lama)</span>}
                                        {originalLogEntry?.entryMethod === 'manual' && <span className="text-xs ml-2 text-emerald-500">(Manual)</span>}
                                        {originalLogEntry?.entryMethod === 'admin_edited' && <span className="text-xs ml-2 text-amber-500">(Admin Edit)</span>}
                                        {originalLogEntry?.entryMethod === 'absence_reason' && <span className="text-xs ml-2 text-yellow-500">(Ket. Tidak Masuk)</span>}
                                        </p>
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                                            <div>
                                                <label className="text-xs font-medium">Total Jam Kerja (jika diubah, sesi akan diabaikan):</label>
                                                <div className="flex items-center gap-2 mt-1">
                                                    <input 
                                                        type="number" min="0" max="23"
                                                        value={Math.floor((logEntry.totalWorkDurationMinutes || 0) / 60)}
                                                        onChange={(e) => {
                                                            const currentMins = (logEntry.totalWorkDurationMinutes || 0) % 60;
                                                            handleAdminWorkLogChange(dateKey, (parseInt(e.target.value) || 0) * 60 + currentMins, logEntry.absenceReason);
                                                        }}
                                                        className={`w-20 px-2 py-1 border rounded-md text-sm ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}
                                                        placeholder="Jam"
                                                        disabled={logEntry.entryMethod === 'absence_reason'}
                                                    /> jam
                                                    <input 
                                                        type="number" min="0" max="59"
                                                        value={(logEntry.totalWorkDurationMinutes || 0) % 60}
                                                        onChange={(e) => {
                                                            const currentHoursInMins = Math.floor((logEntry.totalWorkDurationMinutes || 0) / 60) * 60;
                                                            handleAdminWorkLogChange(dateKey, currentHoursInMins + (parseInt(e.target.value) || 0), logEntry.absenceReason);
                                                        }}
                                                        className={`w-20 px-2 py-1 border rounded-md text-sm ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}
                                                        placeholder="Menit"
                                                        disabled={logEntry.entryMethod === 'absence_reason'}
                                                    /> menit
                                                </div>
                                                <p className="text-xs mt-1">Total: {formatDuration(logEntry.totalWorkDurationMinutes || 0)}</p>
                                            </div>
                                            <div>
                                                <label className="text-xs font-medium">Keterangan Tidak Masuk:</label>
                                                <input 
                                                    type="text"
                                                    value={logEntry.absenceReason || ''}
                                                    onChange={(e) => handleAdminWorkLogChange(dateKey, logEntry.totalWorkDurationMinutes, e.target.value)}
                                                    className={`mt-1 w-full px-2 py-1 border rounded-md text-sm ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white' : 'border-gray-300'}`}
                                                    placeholder="Alasan jika tidak masuk"
                                                />
                                                {logEntry.absenceReason && logEntry.totalWorkDurationMinutes > 0 && <p className="text-xs text-red-500 mt-1">Jika ada alasan, jam kerja akan direset ke 0.</p>}
                                            </div>
                                        </div>
                                        {logEntry.entryMethod === 'multi_session_clock' && Array.isArray(logEntry.sessions) && logEntry.sessions.length > 0 && (
                                            <div className="mt-2 pt-2 border-t border-slate-600 dark:border-slate-700">
                                                <p className="text-xs font-semibold">Sesi Tercatat:</p>
                                                {logEntry.sessions.map((s, idx) => (
                                                    <p key={idx} className="text-xs">
                                                        Sesi {idx + 1}: {formatTime(s.clockIn)} - {s.clockOut ? formatTime(s.clockOut) : '(Aktif)'}
                                                        {s.clockOut && ` (${formatDuration(s.durationMinutes || 0)})`}
                                                    </p>
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                );
                            })}
                        </div>

                        <div className="mt-6 flex justify-end gap-3">
                            <button onClick={() => setIsEditModalOpen(false)} className={`px-4 py-2 rounded-lg text-sm font-medium border ${theme === 'dark' ? 'border-slate-600 hover:bg-slate-700' : 'border-gray-300 hover:bg-gray-100'}`}>Batal</button>
                            <button onClick={saveAdminWorkLogChanges} className="px-4 py-2 rounded-lg text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 flex items-center gap-2" disabled={isLoadingData}>
                                <Save size={16}/> {isLoadingData ? "Menyimpan..." : "Simpan Perubahan"}
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {isAdmin && isBackupRestoreModalOpen && (
                <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center p-4 z-[70]">
                    <div className={`p-6 rounded-xl shadow-2xl w-full max-w-lg ${theme === 'dark' ? 'bg-slate-800 text-slate-200' : 'bg-white text-slate-800'}`}>
                        <div className="flex justify-between items-center mb-6">
                            <h3 className="text-xl font-semibold flex items-center gap-2"><DatabaseBackup size={22}/> Backup & Restore Data</h3>
                            <button onClick={() => setIsBackupRestoreModalOpen(false)} className={`p-1 rounded-full ${theme === 'dark' ? 'hover:bg-slate-700' : 'hover:bg-gray-200'}`}><X size={20}/></button>
                        </div>
                        
                        <div className="mb-6 space-y-3">
                            <h4 className="text-md font-semibold">Backup Data Aplikasi</h4>
                            <p className={`text-xs ${theme === 'dark' ? 'text-slate-400' : 'text-slate-600'}`}>Buat salinan semua data aplikasi (pengaturan, pengguna, catatan kerja, transaksi) dalam format JSON. Simpan file ini di tempat yang aman.</p>
                            <button 
                                onClick={handleBackupData}
                                disabled={isBackingUp || isRestoring}
                                className={`w-full flex items-center justify-center gap-2 px-4 py-2 rounded-lg text-sm font-medium text-white ${theme === 'dark' ? 'bg-sky-600 hover:bg-sky-700' : 'bg-sky-500 hover:bg-sky-600'} transition duration-150 disabled:opacity-60`}
                            >
                                <Download size={16}/> {isBackingUp ? "Memproses Backup..." : "Buat & Unduh File Backup"}
                            </button>
                        </div>

                        <hr className={`my-6 ${theme === 'dark' ? 'border-slate-700' : 'border-gray-300'}`}/>

                        <div className="space-y-3">
                             <h4 className="text-md font-semibold">Restore Data Aplikasi</h4>
                             <div className={`p-3 rounded-md border border-amber-500 ${theme === 'dark' ? 'bg-amber-900/30 text-amber-300' : 'bg-amber-50 text-amber-700'}`}>
                                <div className="flex items-start gap-2">
                                    <HelpCircle size={28} className="mt-0.5 text-amber-500 flex-shrink-0"/>
                                    <div>
                                        <p className="text-xs font-semibold">PENTING:</p>
                                        <ul className="list-disc list-inside text-xs mt-1">
                                            <li>Proses restore akan **menimpa** data saat ini.</li>
                                            <li>Pastikan file backup valid dan berasal dari aplikasi ini.</li>
                                            <li>Tindakan ini tidak dapat dibatalkan.</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <label htmlFor="restoreFile" className="block text-xs font-medium mb-1">Pilih File Backup (.json)</label>
                                <input 
                                    type="file" id="restoreFile" accept=".json"
                                    onChange={(e) => setRestoreFile(e.target.files[0])}
                                    className={`w-full text-sm border rounded-md ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-slate-300 file:bg-slate-600 file:text-slate-200 file:border-0 file:px-3 file:py-2 file:mr-3 hover:file:bg-slate-500' : 'border-gray-300 text-slate-700 file:bg-gray-200 file:text-slate-700 file:border-0 file:px-3 file:py-2 file:mr-3 hover:file:bg-gray-300'}`}
                                />
                            </div>
                             <button 
                                onClick={handleRestoreData}
                                disabled={!restoreFile || isRestoring || isBackingUp}
                                className={`w-full flex items-center justify-center gap-2 px-4 py-2 rounded-lg text-sm font-medium text-white ${theme === 'dark' ? 'bg-red-700 hover:bg-red-800' : 'bg-red-600 hover:bg-red-700'} transition duration-150 disabled:opacity-60`}
                            >
                                <UploadCloud size={16}/> {isRestoring ? "Memproses Restore..." : "Mulai Restore Data"}
                            </button>
                        </div>
                         <div className="mt-8 flex justify-end">
                            <button onClick={() => setIsBackupRestoreModalOpen(false)} className={`px-4 py-2 rounded-lg text-sm font-medium border ${theme === 'dark' ? 'border-slate-600 hover:bg-slate-700' : 'border-gray-300 hover:bg-gray-100'}`}>Tutup</button>
                        </div>
                    </div>
                </div>
            )}

            {isAdmin && isDailyDetailModalOpen && dailyDetailData && adminSelectedEmployeeForMonitor && (
                 <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center p-4 z-[75]">
                    <div className={`p-6 rounded-xl shadow-2xl w-full max-w-md ${theme === 'dark' ? 'bg-slate-800 text-slate-200' : 'bg-white text-slate-800'}`}>
                        <div className="flex justify-between items-center mb-4">
                            <h3 className="text-lg font-semibold flex items-center gap-2"><CalendarDays size={20}/> Detail Harian</h3>
                            <button onClick={() => setIsDailyDetailModalOpen(false)} className={`p-1 rounded-full ${theme === 'dark' ? 'hover:bg-slate-700' : 'hover:bg-gray-200'}`}><X size={20}/></button>
                        </div>
                        <div className="space-y-3 text-sm">
                            <p><strong>Tanggal:</strong> {new Date(dailyDetailData.date + "T00:00:00").toLocaleDateString('id-ID', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</p>
                            <p><strong>Karyawan:</strong> {dailyDetailData.employeeName}</p>
                            <p><strong>Sistem Gaji:</strong> Sistem {dailyDetailData.salarySystemType}</p>
                            <hr className={`my-2 ${theme === 'dark' ? 'border-slate-700' : 'border-gray-200'}`}/>
                            {dailyDetailData.log ? (
                                <>
                                    <p><strong>Metode Input:</strong> <span className="capitalize">{dailyDetailData.log.entryMethod?.replace(/_/g, ' ') || 'N/A'}</span></p>
                                    {dailyDetailData.log.entryMethod === 'multi_session_clock' && Array.isArray(dailyDetailData.log.sessions) && dailyDetailData.log.sessions.length > 0 ? (
                                        <div className="pl-4 text-xs">
                                            {dailyDetailData.log.sessions.map((s, idx) => (
                                                <div key={idx}>
                                                    Sesi {idx + 1}: {formatTime(s.clockIn)} - {s.clockOut ? formatTime(s.clockOut) : '(Aktif)'}
                                                    {s.clockOut && ` (${formatDuration(s.durationMinutes || 0)})`}
                                                </div>
                                            ))}
                                        </div>
                                    ) : dailyDetailData.log.entryMethod === 'clock' ? ( 
                                        <>
                                        <p><strong>Clock In:</strong> {formatTime(dailyDetailData.log.clockInTimestamp)}</p>
                                        <p><strong>Clock Out:</strong> {formatTime(dailyDetailData.log.clockOutTimestamp)}</p>
                                        </>
                                    ) : null}

                                    {dailyDetailData.log.entryMethod === 'absence_reason' ? (
                                        <p className="flex items-start gap-2">
                                            <MessageSquareWarning size={18} className={`mt-0.5 flex-shrink-0 ${theme === 'dark' ? 'text-yellow-400' : 'text-yellow-600'}`}/>
                                            <strong>Alasan Tidak Masuk:</strong> {dailyDetailData.log.absenceReason}
                                        </p>
                                    ) : (
                                        <p><strong>Total Durasi Kerja:</strong> {formatDuration(dailyDetailData.log.totalWorkDurationMinutes)}</p>
                                    )}
                                    
                                    <hr className={`my-2 ${theme === 'dark' ? 'border-slate-700' : 'border-gray-200'}`}/>
                                    <h4 className="font-semibold mt-2">Estimasi Pendapatan Hari Ini:</h4>
                                    {/* Ganti dailyDetailData.dailySalary.base dan .overtime dengan .total */}
                                    <p className="font-bold">Total Pendapatan: Rp {(dailyDetailData.dailySalary.total || 0).toLocaleString('id-ID')}</p>
                                    {dailyDetailData.dailySalary.notes && <p className="text-xs mt-1 italic">({dailyDetailData.dailySalary.notes})</p>}

                                </>
                            ) : (
                                <p className={`${theme === 'dark' ? 'text-slate-400' : 'text-slate-500'}`}>Tidak ada catatan kerja untuk tanggal ini.</p>
                            )}
                        </div>
                         <div className="mt-6 flex justify-end">
                            <button onClick={() => setIsDailyDetailModalOpen(false)} className={`px-4 py-2 rounded-lg text-sm font-medium border ${theme === 'dark' ? 'border-slate-600 hover:bg-slate-700' : 'border-gray-300 hover:bg-gray-100'}`}>Tutup</button>
                        </div>
                    </div>
                 </div>
            )}
            {isAdmin && isPaymentModalOpen && paymentEmployee && (
                <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center p-4 z-[70]"> 
                    <div className={`p-6 rounded-xl shadow-2xl w-full max-w-md ${theme === 'dark' ? 'bg-slate-800 text-slate-200' : 'bg-white text-slate-800'}`}>
                        <div className="flex justify-between items-center mb-4">
                            <h3 className="text-xl font-semibold flex items-center gap-2"><Wallet size={22}/> Input Pembayaran/Kasbon</h3>
                            <button onClick={() => setIsPaymentModalOpen(false)} className={`p-1 rounded-full ${theme === 'dark' ? 'hover:bg-slate-700' : 'hover:bg-gray-200'}`}><X size={20}/></button>
                        </div>
                        <p className="mb-1 text-sm">Untuk: <span className="font-semibold">{paymentEmployee.name}</span></p>
                        <p className="mb-4 text-sm">Tunggakan Gaji Saat Ini: 
                            <span className={`font-semibold ${ (paymentEmployee.totalAccumulatedBalance || 0) >= 0 ? 'text-indigo-500 dark:text-indigo-400' : 'text-red-500 dark:text-red-400'}`}>
                                Rp {(paymentEmployee.totalAccumulatedBalance || 0).toLocaleString('id-ID')}
                            </span>
                        </p>

                        <form onSubmit={handlePaymentSubmit}>
                            <div className="space-y-4">
                                <div>
                                    <label htmlFor="paymentAmount" className="block text-sm font-medium mb-1">Jumlah Pembayaran (Rp)</label>
                                    <input 
                                        type="number" 
                                        id="paymentAmount" 
                                        value={paymentAmount} 
                                        onChange={(e) => setPaymentAmount(e.target.value)} 
                                        required
                                        min="1"
                                        className={`w-full px-3 py-2 border rounded-md ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white placeholder-slate-400' : 'border-gray-300 placeholder-gray-400'}`}
                                        placeholder="Masukkan jumlah pembayaran"
                                    />
                                </div>
                                <div>
                                    <label htmlFor="paymentNote" className="block text-sm font-medium mb-1">Catatan (Opsional)</label>
                                    <input 
                                        type="text" 
                                        id="paymentNote" 
                                        value={paymentNote} 
                                        onChange={(e) => setPaymentNote(e.target.value)}
                                        placeholder="Contoh: Kasbon awal bulan"
                                        className={`w-full px-3 py-2 border rounded-md ${theme === 'dark' ? 'bg-slate-700 border-slate-600 text-white placeholder-slate-400' : 'border-gray-300 placeholder-gray-400'}`}
                                    />
                                </div>
                            </div>
                            <div className="mt-6 flex justify-end gap-3">
                                <button 
                                    type="button" 
                                    onClick={() => setIsPaymentModalOpen(false)} 
                                    className={`px-4 py-2 rounded-lg text-sm font-medium border ${theme === 'dark' ? 'border-slate-600 hover:bg-slate-700' : 'border-gray-300 hover:bg-gray-100'}`}
                                >
                                    Batal
                                </button>
                                <button 
                                    type="submit" 
                                    className="px-4 py-2 rounded-lg text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 flex items-center gap-2" 
                                    disabled={isProcessingPayment}
                                >
                                    <Save size={16}/> {isProcessingPayment ? "Memproses..." : "Simpan Pembayaran"}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
        </>
    );
};

export default App;
